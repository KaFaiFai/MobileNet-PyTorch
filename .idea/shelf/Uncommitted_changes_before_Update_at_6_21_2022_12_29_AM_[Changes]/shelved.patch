Index: convert.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/convert.py b/convert.py
new file mode 100644
--- /dev/null	(date 1655741635498)
+++ b/convert.py	(date 1655741635498)
@@ -0,0 +1,251 @@
+"""
+convert from
+- official tensorflow pretrained model (WIP)
+- wjc852456's repo https://github.com/wjc852456/pytorch-mobilenet-v1
+"""
+from pathlib import Path
+
+import torch
+import tensorflow as tf
+import numpy as np
+
+from model import MobileNet
+
+
+class ConverterOfficial:
+    def __init__(self, alpha=1.0, input_resolution=224, num_class=1000):
+        raise Exception("Not implemented")
+        self.alpha = alpha
+        self.input_resolution = input_resolution
+        self.num_class = num_class
+        self._model = None
+        self._state_dict = dict()
+
+    def build_tf_model(self):
+        if self.input_resolution != 224:
+            raise Exception("Not implemented for input_resolution != 224")
+
+        self._model = tf.keras.applications.mobilenet.MobileNet(
+            input_shape=(self.input_resolution, self.input_resolution, 3),
+            alpha=self.alpha,
+            depth_multiplier=1,
+            dropout=0.001,
+            include_top=True,
+            weights='imagenet',
+            input_tensor=None,
+            pooling=None,
+            classes=self.num_class,
+            classifier_activation='softmax',
+        )
+
+    def to_pytorch_state(self):
+        self._state_dict = dict()
+
+        # initial
+        self._tf2pt_conv("conv1", "initial.0")
+        self._tf2pt_bn("conv1_bn", "initial.1")
+
+        # separable_convs
+        for tf_idx, pt_idx in zip(range(1, 14), range(13)):
+            self._tf2pt_conv_dw(f"conv_dw_{tf_idx}", f"separable_convs.{pt_idx}.dw_conv.conv")
+            self._tf2pt_bn(f"conv_dw_{tf_idx}_bn", f"separable_convs.{pt_idx}.bn1")
+            self._tf2pt_conv(f"conv_pw_{tf_idx}", f"separable_convs.{pt_idx}.pw_conv.conv")
+            self._tf2pt_bn(f"conv_pw_{tf_idx}_bn", f"separable_convs.{pt_idx}.bn2")
+
+        # final
+        self._tf2pt_conv("conv_preds", "final.2", has_bias=True)
+
+        # for param_tensor in self._state_dict:
+        #     print(f"{param_tensor:<45}: {self._state_dict[param_tensor].size()}")
+
+    def save_to(self, out_dir):
+        state = {"epoch": -1, "alpha": self.alpha, "input_resolution": self.input_resolution,
+                 "num_class": self.num_class, "state_dict": self._state_dict}
+        out_path = Path(out_dir)
+        out_path.mkdir(exist_ok=True, parents=True)
+        save_to = out_path / f"mobile_net-a{self.alpha * 100:.0f}-r{self.input_resolution:.0f}" \
+                             f"-c{self.num_class}-e{0:04d}.pth"
+        torch.save(state, str(save_to))
+
+    def _tf2pt_conv(self, tf_layer: str, pt_layer: str, has_bias: bool = False):
+        # conv2d kernel shape: pytorch(OUT_C, IN_C, H, W), tensorflow(H, W, IN_C, OUT_C)
+        tf_weights = self._model.get_layer(tf_layer).get_weights()
+        self._state_dict[f"{pt_layer}.weight"] = torch.from_numpy(np.transpose(tf_weights[0], (3, 2, 0, 1)))
+        if has_bias:
+            self._state_dict[f"{pt_layer}.bias"] = torch.from_numpy(tf_weights[1])
+
+    def _tf2pt_conv_dw(self, tf_layer: str, pt_layer: str):
+        # conv2d kernel shape: pytorch(OUT_C, IN_C, H, W), tensorflow(H, W, OUT_C, IN_C)
+        tf_kernel = self._model.get_layer(tf_layer).get_weights()[0]
+        self._state_dict[f"{pt_layer}.weight"] = torch.from_numpy(np.transpose(tf_kernel, (2, 3, 0, 1)))
+
+    def _tf2pt_bn(self, tf_layer: str, pt_layer: str):
+        # tf weights: [gamma, beta, moving_mean, moving_variance]
+        # pt params : [.weight, .bias, .running_mean, .running_var, .num_batches_tracked]
+        tf_weights = self._model.get_layer(tf_layer).get_weights()
+        self._state_dict[f"{pt_layer}.weight"] = torch.from_numpy(tf_weights[0])
+        self._state_dict[f"{pt_layer}.bias"] = torch.from_numpy(tf_weights[1])
+        self._state_dict[f"{pt_layer}.running_mean"] = torch.from_numpy(tf_weights[2])
+        self._state_dict[f"{pt_layer}.running_var"] = torch.from_numpy(tf_weights[3])
+        self._state_dict[f"{pt_layer}.num_batches_tracked"] = torch.tensor(0)
+
+
+class ConverterWJC852456:
+    def __init__(self):
+        self.alpha = 1.0
+        self.input_resolution = 224
+        self.num_class = 1000
+        self._model = None
+        self._state_dict = dict()
+
+    def load_wjc852456_model(self):
+        if self.input_resolution != 224:
+            raise Exception("Not implemented for input_resolution != 224")
+
+        state = torch.load(r"C:\_Project\Pycharm Projects\MobileNet\pretrained\mobilenet_sgd_68.848.pth.tar")
+        self._model = state["state_dict"]
+
+    def to_pytorch_state(self):
+        self._state_dict = dict()
+
+        # initial
+        self._wjc2pt_conv("module.model.0.0", "initial.0")
+        self._wjc2pt_bn("module.model.0.1", "initial.1")
+
+        # separable_convs
+        for wjc_idx, pt_idx in zip(range(1, 14), range(13)):
+            self._wjc2pt_conv(f"module.model.{wjc_idx}.0", f"separable_convs.{pt_idx}.dw_conv.conv")
+            self._wjc2pt_bn(f"module.model.{wjc_idx}.1", f"separable_convs.{pt_idx}.bn1")
+            self._wjc2pt_conv(f"module.model.{wjc_idx}.3", f"separable_convs.{pt_idx}.pw_conv.conv")
+            self._wjc2pt_bn(f"module.model.{wjc_idx}.4", f"separable_convs.{pt_idx}.bn2")
+
+        # final
+        self._wjc2pt_fc("module.fc", "final.2")
+
+        for param_tensor in self._state_dict:
+            print(f"{param_tensor:<45}: {self._state_dict[param_tensor].size()}")
+
+    def save_to(self, out_dir):
+        state = {"epoch": -1, "alpha": self.alpha, "input_resolution": self.input_resolution,
+                 "num_class": self.num_class, "state_dict": self._state_dict}
+        out_path = Path(out_dir)
+        out_path.mkdir(exist_ok=True, parents=True)
+        save_to = out_path / f"wjc-mobilenet-a{self.alpha * 100:.0f}-r{self.input_resolution:.0f}" \
+                             f"-c{self.num_class}-e{0:04d}.pth"
+        torch.save(state, str(save_to))
+
+    def _wjc2pt_conv(self, wjc_layer: str, pt_layer: str):
+        self._state_dict[f"{pt_layer}.weight"] = self._model[f"{wjc_layer}.weight"]
+
+    def _wjc2pt_bn(self, wjc_layer: str, pt_layer: str):
+        self._state_dict[f"{pt_layer}.weight"] = self._model[f"{wjc_layer}.weight"]
+        self._state_dict[f"{pt_layer}.bias"] = self._model[f"{wjc_layer}.bias"]
+        self._state_dict[f"{pt_layer}.running_mean"] = self._model[f"{wjc_layer}.running_mean"]
+        self._state_dict[f"{pt_layer}.running_var"] = self._model[f"{wjc_layer}.running_var"]
+        self._state_dict[f"{pt_layer}.num_batches_tracked"] = torch.tensor(0)
+
+    def _wjc2pt_fc(self, wjc_layer: str, pt_layer: str):
+        wjc_weight = self._model[f"{wjc_layer}.weight"]
+        self._state_dict[f"{pt_layer}.weight"] = wjc_weight.view(*wjc_weight.shape, 1, 1)
+        self._state_dict[f"{pt_layer}.bias"] = self._model[f"{wjc_layer}.bias"]
+
+
+def peek_pytorch_state():
+    network = MobileNet(1000)
+    network_state = network.state_dict()
+
+    # pretrained_model_path = r"C:\_Project\Pycharm Projects\MobileNet\pretrained\mobilenet_sgd_68.848.pth.tar"
+    # state = torch.load(pretrained_model_path)
+    # network.load_state_dict(state["state_dict"])
+    # network_state = state["state_dict"]
+
+    print("PyTorch model's state_dict:")
+    for param_tensor in network_state:
+        dims = len(network_state[param_tensor].size())
+        if dims == 1:
+            list_peek = network_state[param_tensor][:5].tolist()
+        elif dims == 4:
+            list_peek = network_state[param_tensor][:5, :5, :5, :5].tolist()
+        else:
+            list_peek = []
+        print(f"{param_tensor:<45}: {network_state[param_tensor].size()}")
+        # f" {list_peek}")
+
+
+def peek_tensorflow_state():
+    model = tf.keras.applications.mobilenet.MobileNet(
+        input_shape=(224, 224, 3),
+        alpha=1.0,
+        depth_multiplier=1,
+        dropout=0.001,
+        include_top=True,
+        weights='imagenet',
+        input_tensor=None,
+        pooling=None,
+        classes=1000,
+        classifier_activation='softmax',
+    )
+    # model.summary()
+    # inputs = tf.keras.Input(shape=(32, 32, 3))
+    # x = tf.keras.layers.Conv2D(5, (2, 3))(inputs)
+    # outputs = tf.keras.layers.Dense(5, activation=tf.nn.softmax)(x)
+    # model = tf.keras.Model(inputs=inputs, outputs=outputs)
+
+    random_input = np.random.randn(5, 224, 224, 3)
+    # x = tf.convert_to_tensor(random_input, dtype=tf.float32)
+    x = tf.random.normal((5, 224, 224, 3))
+    # with tf.GradientTape() as tape:
+    predictions = model(x)
+    print(predictions)
+
+    # layer = model.layers[1]
+    # kernel = layer.get_weights()[0]
+    # print(kernel.shape)
+    # print(np.transpose(kernel, (2, 3, 0, 1)).shape)
+
+    # for layer in model.layers:
+    #     if len(layer.get_weights()) > 0:
+    #         for t, w in zip(layer.weights, layer.get_weights()):
+    #             dims = len(w.shape)
+    #             if dims == 1:
+    #                 list_peek = w[:5].tolist()
+    #             elif dims == 4:
+    #                 list_peek = w[:5, :5, :5, :5].tolist()
+    #             else:
+    #                 list_peek = []
+    #             print(f"{t.name:<45}: {w.shape} "
+    #                   f"{list_peek}")
+
+    # print(model.summary())
+    # print(model.layers[1].weights[0].numpy().shape)
+    # print(model.layers[1].bias)
+    # print(model.get)
+
+
+if __name__ == '__main__':
+    # model = tf.keras.applications.mobilenet.MobileNet(
+    #     input_shape=None,
+    #     alpha=1.0,
+    #     depth_multiplier=1,
+    #     dropout=0.001,
+    #     include_top=True,
+    #     weights='imagenet',
+    #     input_tensor=None,
+    #     pooling=None,
+    #     classes=1000,
+    #     classifier_activation='softmax',
+    # )
+    # build_pytorch_network_state(model)
+
+    # peek_tensorflow_state()
+    # peek_pytorch_state()
+
+    # converter = ConverterOfficial()
+    # converter.build_tf_model()
+    # converter.to_pytorch_state()
+    # converter.save_to(r".\pretrained")
+
+    converter = ConverterWJC852456()
+    converter.load_wjc852456_model()
+    converter.to_pytorch_state()
+    converter.save_to(r".\pretrained")
Index: notes/pt_mobilenet_params.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/notes/pt_mobilenet_params.txt b/notes/pt_mobilenet_params.txt
new file mode 100644
--- /dev/null	(date 1655741029538)
+++ b/notes/pt_mobilenet_params.txt	(date 1655741029538)
@@ -0,0 +1,164 @@
+initial.0.weight                             : torch.Size([32, 3, 3, 3])
+initial.1.weight                             : torch.Size([32])
+initial.1.bias                               : torch.Size([32])
+initial.1.running_mean                       : torch.Size([32])
+initial.1.running_var                        : torch.Size([32])
+initial.1.num_batches_tracked                : torch.Size([])
+separable_convs.0.dw_conv.conv.weight        : torch.Size([32, 1, 3, 3])
+separable_convs.0.bn1.weight                 : torch.Size([32])
+separable_convs.0.bn1.bias                   : torch.Size([32])
+separable_convs.0.bn1.running_mean           : torch.Size([32])
+separable_convs.0.bn1.running_var            : torch.Size([32])
+separable_convs.0.bn1.num_batches_tracked    : torch.Size([])
+separable_convs.0.pw_conv.conv.weight        : torch.Size([64, 32, 1, 1])
+separable_convs.0.bn2.weight                 : torch.Size([64])
+separable_convs.0.bn2.bias                   : torch.Size([64])
+separable_convs.0.bn2.running_mean           : torch.Size([64])
+separable_convs.0.bn2.running_var            : torch.Size([64])
+separable_convs.0.bn2.num_batches_tracked    : torch.Size([])
+separable_convs.1.dw_conv.conv.weight        : torch.Size([64, 1, 3, 3])
+separable_convs.1.bn1.weight                 : torch.Size([64])
+separable_convs.1.bn1.bias                   : torch.Size([64])
+separable_convs.1.bn1.running_mean           : torch.Size([64])
+separable_convs.1.bn1.running_var            : torch.Size([64])
+separable_convs.1.bn1.num_batches_tracked    : torch.Size([])
+separable_convs.1.pw_conv.conv.weight        : torch.Size([128, 64, 1, 1])
+separable_convs.1.bn2.weight                 : torch.Size([128])
+separable_convs.1.bn2.bias                   : torch.Size([128])
+separable_convs.1.bn2.running_mean           : torch.Size([128])
+separable_convs.1.bn2.running_var            : torch.Size([128])
+separable_convs.1.bn2.num_batches_tracked    : torch.Size([])
+separable_convs.2.dw_conv.conv.weight        : torch.Size([128, 1, 3, 3])
+separable_convs.2.bn1.weight                 : torch.Size([128])
+separable_convs.2.bn1.bias                   : torch.Size([128])
+separable_convs.2.bn1.running_mean           : torch.Size([128])
+separable_convs.2.bn1.running_var            : torch.Size([128])
+separable_convs.2.bn1.num_batches_tracked    : torch.Size([])
+separable_convs.2.pw_conv.conv.weight        : torch.Size([128, 128, 1, 1])
+separable_convs.2.bn2.weight                 : torch.Size([128])
+separable_convs.2.bn2.bias                   : torch.Size([128])
+separable_convs.2.bn2.running_mean           : torch.Size([128])
+separable_convs.2.bn2.running_var            : torch.Size([128])
+separable_convs.2.bn2.num_batches_tracked    : torch.Size([])
+separable_convs.3.dw_conv.conv.weight        : torch.Size([128, 1, 3, 3])
+separable_convs.3.bn1.weight                 : torch.Size([128])
+separable_convs.3.bn1.bias                   : torch.Size([128])
+separable_convs.3.bn1.running_mean           : torch.Size([128])
+separable_convs.3.bn1.running_var            : torch.Size([128])
+separable_convs.3.bn1.num_batches_tracked    : torch.Size([])
+separable_convs.3.pw_conv.conv.weight        : torch.Size([256, 128, 1, 1])
+separable_convs.3.bn2.weight                 : torch.Size([256])
+separable_convs.3.bn2.bias                   : torch.Size([256])
+separable_convs.3.bn2.running_mean           : torch.Size([256])
+separable_convs.3.bn2.running_var            : torch.Size([256])
+separable_convs.3.bn2.num_batches_tracked    : torch.Size([])
+separable_convs.4.dw_conv.conv.weight        : torch.Size([256, 1, 3, 3])
+separable_convs.4.bn1.weight                 : torch.Size([256])
+separable_convs.4.bn1.bias                   : torch.Size([256])
+separable_convs.4.bn1.running_mean           : torch.Size([256])
+separable_convs.4.bn1.running_var            : torch.Size([256])
+separable_convs.4.bn1.num_batches_tracked    : torch.Size([])
+separable_convs.4.pw_conv.conv.weight        : torch.Size([256, 256, 1, 1])
+separable_convs.4.bn2.weight                 : torch.Size([256])
+separable_convs.4.bn2.bias                   : torch.Size([256])
+separable_convs.4.bn2.running_mean           : torch.Size([256])
+separable_convs.4.bn2.running_var            : torch.Size([256])
+separable_convs.4.bn2.num_batches_tracked    : torch.Size([])
+separable_convs.5.dw_conv.conv.weight        : torch.Size([256, 1, 3, 3])
+separable_convs.5.bn1.weight                 : torch.Size([256])
+separable_convs.5.bn1.bias                   : torch.Size([256])
+separable_convs.5.bn1.running_mean           : torch.Size([256])
+separable_convs.5.bn1.running_var            : torch.Size([256])
+separable_convs.5.bn1.num_batches_tracked    : torch.Size([])
+separable_convs.5.pw_conv.conv.weight        : torch.Size([512, 256, 1, 1])
+separable_convs.5.bn2.weight                 : torch.Size([512])
+separable_convs.5.bn2.bias                   : torch.Size([512])
+separable_convs.5.bn2.running_mean           : torch.Size([512])
+separable_convs.5.bn2.running_var            : torch.Size([512])
+separable_convs.5.bn2.num_batches_tracked    : torch.Size([])
+separable_convs.6.dw_conv.conv.weight        : torch.Size([512, 1, 3, 3])
+separable_convs.6.bn1.weight                 : torch.Size([512])
+separable_convs.6.bn1.bias                   : torch.Size([512])
+separable_convs.6.bn1.running_mean           : torch.Size([512])
+separable_convs.6.bn1.running_var            : torch.Size([512])
+separable_convs.6.bn1.num_batches_tracked    : torch.Size([])
+separable_convs.6.pw_conv.conv.weight        : torch.Size([512, 512, 1, 1])
+separable_convs.6.bn2.weight                 : torch.Size([512])
+separable_convs.6.bn2.bias                   : torch.Size([512])
+separable_convs.6.bn2.running_mean           : torch.Size([512])
+separable_convs.6.bn2.running_var            : torch.Size([512])
+separable_convs.6.bn2.num_batches_tracked    : torch.Size([])
+separable_convs.7.dw_conv.conv.weight        : torch.Size([512, 1, 3, 3])
+separable_convs.7.bn1.weight                 : torch.Size([512])
+separable_convs.7.bn1.bias                   : torch.Size([512])
+separable_convs.7.bn1.running_mean           : torch.Size([512])
+separable_convs.7.bn1.running_var            : torch.Size([512])
+separable_convs.7.bn1.num_batches_tracked    : torch.Size([])
+separable_convs.7.pw_conv.conv.weight        : torch.Size([512, 512, 1, 1])
+separable_convs.7.bn2.weight                 : torch.Size([512])
+separable_convs.7.bn2.bias                   : torch.Size([512])
+separable_convs.7.bn2.running_mean           : torch.Size([512])
+separable_convs.7.bn2.running_var            : torch.Size([512])
+separable_convs.7.bn2.num_batches_tracked    : torch.Size([])
+separable_convs.8.dw_conv.conv.weight        : torch.Size([512, 1, 3, 3])
+separable_convs.8.bn1.weight                 : torch.Size([512])
+separable_convs.8.bn1.bias                   : torch.Size([512])
+separable_convs.8.bn1.running_mean           : torch.Size([512])
+separable_convs.8.bn1.running_var            : torch.Size([512])
+separable_convs.8.bn1.num_batches_tracked    : torch.Size([])
+separable_convs.8.pw_conv.conv.weight        : torch.Size([512, 512, 1, 1])
+separable_convs.8.bn2.weight                 : torch.Size([512])
+separable_convs.8.bn2.bias                   : torch.Size([512])
+separable_convs.8.bn2.running_mean           : torch.Size([512])
+separable_convs.8.bn2.running_var            : torch.Size([512])
+separable_convs.8.bn2.num_batches_tracked    : torch.Size([])
+separable_convs.9.dw_conv.conv.weight        : torch.Size([512, 1, 3, 3])
+separable_convs.9.bn1.weight                 : torch.Size([512])
+separable_convs.9.bn1.bias                   : torch.Size([512])
+separable_convs.9.bn1.running_mean           : torch.Size([512])
+separable_convs.9.bn1.running_var            : torch.Size([512])
+separable_convs.9.bn1.num_batches_tracked    : torch.Size([])
+separable_convs.9.pw_conv.conv.weight        : torch.Size([512, 512, 1, 1])
+separable_convs.9.bn2.weight                 : torch.Size([512])
+separable_convs.9.bn2.bias                   : torch.Size([512])
+separable_convs.9.bn2.running_mean           : torch.Size([512])
+separable_convs.9.bn2.running_var            : torch.Size([512])
+separable_convs.9.bn2.num_batches_tracked    : torch.Size([])
+separable_convs.10.dw_conv.conv.weight       : torch.Size([512, 1, 3, 3])
+separable_convs.10.bn1.weight                : torch.Size([512])
+separable_convs.10.bn1.bias                  : torch.Size([512])
+separable_convs.10.bn1.running_mean          : torch.Size([512])
+separable_convs.10.bn1.running_var           : torch.Size([512])
+separable_convs.10.bn1.num_batches_tracked   : torch.Size([])
+separable_convs.10.pw_conv.conv.weight       : torch.Size([512, 512, 1, 1])
+separable_convs.10.bn2.weight                : torch.Size([512])
+separable_convs.10.bn2.bias                  : torch.Size([512])
+separable_convs.10.bn2.running_mean          : torch.Size([512])
+separable_convs.10.bn2.running_var           : torch.Size([512])
+separable_convs.10.bn2.num_batches_tracked   : torch.Size([])
+separable_convs.11.dw_conv.conv.weight       : torch.Size([512, 1, 3, 3])
+separable_convs.11.bn1.weight                : torch.Size([512])
+separable_convs.11.bn1.bias                  : torch.Size([512])
+separable_convs.11.bn1.running_mean          : torch.Size([512])
+separable_convs.11.bn1.running_var           : torch.Size([512])
+separable_convs.11.bn1.num_batches_tracked   : torch.Size([])
+separable_convs.11.pw_conv.conv.weight       : torch.Size([1024, 512, 1, 1])
+separable_convs.11.bn2.weight                : torch.Size([1024])
+separable_convs.11.bn2.bias                  : torch.Size([1024])
+separable_convs.11.bn2.running_mean          : torch.Size([1024])
+separable_convs.11.bn2.running_var           : torch.Size([1024])
+separable_convs.11.bn2.num_batches_tracked   : torch.Size([])
+separable_convs.12.dw_conv.conv.weight       : torch.Size([1024, 1, 3, 3])
+separable_convs.12.bn1.weight                : torch.Size([1024])
+separable_convs.12.bn1.bias                  : torch.Size([1024])
+separable_convs.12.bn1.running_mean          : torch.Size([1024])
+separable_convs.12.bn1.running_var           : torch.Size([1024])
+separable_convs.12.bn1.num_batches_tracked   : torch.Size([])
+separable_convs.12.pw_conv.conv.weight       : torch.Size([1024, 1024, 1, 1])
+separable_convs.12.bn2.weight                : torch.Size([1024])
+separable_convs.12.bn2.bias                  : torch.Size([1024])
+separable_convs.12.bn2.running_mean          : torch.Size([1024])
+separable_convs.12.bn2.running_var           : torch.Size([1024])
+separable_convs.12.bn2.num_batches_tracked   : torch.Size([])
+final.2.weight                               : torch.Size([1000, 1024, 1, 1])
+final.2.bias                                 : torch.Size([1000])
\ No newline at end of file
Index: notes/pt_mobilenet_summary.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/notes/pt_mobilenet_summary.txt b/notes/pt_mobilenet_summary.txt
new file mode 100644
--- /dev/null	(date 1655717327890)
+++ b/notes/pt_mobilenet_summary.txt	(date 1655717327890)
@@ -0,0 +1,116 @@
+==========================================================================================
+Layer (type:depth-idx)                   Output Shape              Param #
+==========================================================================================
+├─Sequential: 1-1                        [-1, 32, 112, 112]        --
+|    └─AdaptiveAvgPool2d: 2-1            [-1, 3, 224, 224]         --
+|    └─Conv2d: 2-2                       [-1, 32, 112, 112]        864
+|    └─BatchNorm2d: 2-3                  [-1, 32, 112, 112]        64
+|    └─ReLU: 2-4                         [-1, 32, 112, 112]        --
+├─Sequential: 1-2                        [-1, 1024, 7, 7]          --
+|    └─SeparableConv: 2-5                [-1, 64, 112, 112]        --
+|    |    └─DepthWiseConv: 3-1           [-1, 32, 112, 112]        288
+|    |    └─BatchNorm2d: 3-2             [-1, 32, 112, 112]        64
+|    |    └─ReLU: 3-3                    [-1, 32, 112, 112]        --
+|    |    └─PointWiseConv: 3-4           [-1, 64, 112, 112]        2,048
+|    |    └─BatchNorm2d: 3-5             [-1, 64, 112, 112]        128
+|    |    └─ReLU: 3-6                    [-1, 64, 112, 112]        --
+|    └─SeparableConv: 2-6                [-1, 128, 56, 56]         --
+|    |    └─DepthWiseConv: 3-7           [-1, 64, 56, 56]          576
+|    |    └─BatchNorm2d: 3-8             [-1, 64, 56, 56]          128
+|    |    └─ReLU: 3-9                    [-1, 64, 56, 56]          --
+|    |    └─PointWiseConv: 3-10          [-1, 128, 56, 56]         8,192
+|    |    └─BatchNorm2d: 3-11            [-1, 128, 56, 56]         256
+|    |    └─ReLU: 3-12                   [-1, 128, 56, 56]         --
+|    └─SeparableConv: 2-7                [-1, 128, 56, 56]         --
+|    |    └─DepthWiseConv: 3-13          [-1, 128, 56, 56]         1,152
+|    |    └─BatchNorm2d: 3-14            [-1, 128, 56, 56]         256
+|    |    └─ReLU: 3-15                   [-1, 128, 56, 56]         --
+|    |    └─PointWiseConv: 3-16          [-1, 128, 56, 56]         16,384
+|    |    └─BatchNorm2d: 3-17            [-1, 128, 56, 56]         256
+|    |    └─ReLU: 3-18                   [-1, 128, 56, 56]         --
+|    └─SeparableConv: 2-8                [-1, 256, 28, 28]         --
+|    |    └─DepthWiseConv: 3-19          [-1, 128, 28, 28]         1,152
+|    |    └─BatchNorm2d: 3-20            [-1, 128, 28, 28]         256
+|    |    └─ReLU: 3-21                   [-1, 128, 28, 28]         --
+|    |    └─PointWiseConv: 3-22          [-1, 256, 28, 28]         32,768
+|    |    └─BatchNorm2d: 3-23            [-1, 256, 28, 28]         512
+|    |    └─ReLU: 3-24                   [-1, 256, 28, 28]         --
+|    └─SeparableConv: 2-9                [-1, 256, 28, 28]         --
+|    |    └─DepthWiseConv: 3-25          [-1, 256, 28, 28]         2,304
+|    |    └─BatchNorm2d: 3-26            [-1, 256, 28, 28]         512
+|    |    └─ReLU: 3-27                   [-1, 256, 28, 28]         --
+|    |    └─PointWiseConv: 3-28          [-1, 256, 28, 28]         65,536
+|    |    └─BatchNorm2d: 3-29            [-1, 256, 28, 28]         512
+|    |    └─ReLU: 3-30                   [-1, 256, 28, 28]         --
+|    └─SeparableConv: 2-10               [-1, 512, 14, 14]         --
+|    |    └─DepthWiseConv: 3-31          [-1, 256, 14, 14]         2,304
+|    |    └─BatchNorm2d: 3-32            [-1, 256, 14, 14]         512
+|    |    └─ReLU: 3-33                   [-1, 256, 14, 14]         --
+|    |    └─PointWiseConv: 3-34          [-1, 512, 14, 14]         131,072
+|    |    └─BatchNorm2d: 3-35            [-1, 512, 14, 14]         1,024
+|    |    └─ReLU: 3-36                   [-1, 512, 14, 14]         --
+|    └─SeparableConv: 2-11               [-1, 512, 14, 14]         --
+|    |    └─DepthWiseConv: 3-37          [-1, 512, 14, 14]         4,608
+|    |    └─BatchNorm2d: 3-38            [-1, 512, 14, 14]         1,024
+|    |    └─ReLU: 3-39                   [-1, 512, 14, 14]         --
+|    |    └─PointWiseConv: 3-40          [-1, 512, 14, 14]         262,144
+|    |    └─BatchNorm2d: 3-41            [-1, 512, 14, 14]         1,024
+|    |    └─ReLU: 3-42                   [-1, 512, 14, 14]         --
+|    └─SeparableConv: 2-12               [-1, 512, 14, 14]         --
+|    |    └─DepthWiseConv: 3-43          [-1, 512, 14, 14]         4,608
+|    |    └─BatchNorm2d: 3-44            [-1, 512, 14, 14]         1,024
+|    |    └─ReLU: 3-45                   [-1, 512, 14, 14]         --
+|    |    └─PointWiseConv: 3-46          [-1, 512, 14, 14]         262,144
+|    |    └─BatchNorm2d: 3-47            [-1, 512, 14, 14]         1,024
+|    |    └─ReLU: 3-48                   [-1, 512, 14, 14]         --
+|    └─SeparableConv: 2-13               [-1, 512, 14, 14]         --
+|    |    └─DepthWiseConv: 3-49          [-1, 512, 14, 14]         4,608
+|    |    └─BatchNorm2d: 3-50            [-1, 512, 14, 14]         1,024
+|    |    └─ReLU: 3-51                   [-1, 512, 14, 14]         --
+|    |    └─PointWiseConv: 3-52          [-1, 512, 14, 14]         262,144
+|    |    └─BatchNorm2d: 3-53            [-1, 512, 14, 14]         1,024
+|    |    └─ReLU: 3-54                   [-1, 512, 14, 14]         --
+|    └─SeparableConv: 2-14               [-1, 512, 14, 14]         --
+|    |    └─DepthWiseConv: 3-55          [-1, 512, 14, 14]         4,608
+|    |    └─BatchNorm2d: 3-56            [-1, 512, 14, 14]         1,024
+|    |    └─ReLU: 3-57                   [-1, 512, 14, 14]         --
+|    |    └─PointWiseConv: 3-58          [-1, 512, 14, 14]         262,144
+|    |    └─BatchNorm2d: 3-59            [-1, 512, 14, 14]         1,024
+|    |    └─ReLU: 3-60                   [-1, 512, 14, 14]         --
+|    └─SeparableConv: 2-15               [-1, 512, 14, 14]         --
+|    |    └─DepthWiseConv: 3-61          [-1, 512, 14, 14]         4,608
+|    |    └─BatchNorm2d: 3-62            [-1, 512, 14, 14]         1,024
+|    |    └─ReLU: 3-63                   [-1, 512, 14, 14]         --
+|    |    └─PointWiseConv: 3-64          [-1, 512, 14, 14]         262,144
+|    |    └─BatchNorm2d: 3-65            [-1, 512, 14, 14]         1,024
+|    |    └─ReLU: 3-66                   [-1, 512, 14, 14]         --
+|    └─SeparableConv: 2-16               [-1, 1024, 7, 7]          --
+|    |    └─DepthWiseConv: 3-67          [-1, 512, 7, 7]           4,608
+|    |    └─BatchNorm2d: 3-68            [-1, 512, 7, 7]           1,024
+|    |    └─ReLU: 3-69                   [-1, 512, 7, 7]           --
+|    |    └─PointWiseConv: 3-70          [-1, 1024, 7, 7]          524,288
+|    |    └─BatchNorm2d: 3-71            [-1, 1024, 7, 7]          2,048
+|    |    └─ReLU: 3-72                   [-1, 1024, 7, 7]          --
+|    └─SeparableConv: 2-17               [-1, 1024, 7, 7]          --
+|    |    └─DepthWiseConv: 3-73          [-1, 1024, 7, 7]          9,216
+|    |    └─BatchNorm2d: 3-74            [-1, 1024, 7, 7]          2,048
+|    |    └─ReLU: 3-75                   [-1, 1024, 7, 7]          --
+|    |    └─PointWiseConv: 3-76          [-1, 1024, 7, 7]          1,048,576
+|    |    └─BatchNorm2d: 3-77            [-1, 1024, 7, 7]          2,048
+|    |    └─ReLU: 3-78                   [-1, 1024, 7, 7]          --
+├─Sequential: 1-3                        [-1, 1000]                --
+|    └─AvgPool2d: 2-18                   [-1, 1024, 1, 1]          --
+|    └─Dropout: 2-19                     [-1, 1024, 1, 1]          --
+|    └─Conv2d: 2-20                      [-1, 1000, 1, 1]          1,025,000
+|    └─Flatten: 2-21                     [-1, 1000]                --
+==========================================================================================
+Total params: 4,231,976
+Trainable params: 4,231,976
+Non-trainable params: 0
+Total mult-adds (M): 579.35
+==========================================================================================
+Input size (MB): 0.57
+Forward/backward pass size (MB): 76.95
+Params size (MB): 16.14
+Estimated Total Size (MB): 93.67
+==========================================================================================
\ No newline at end of file
Index: notes/wjc852456_mobilenet_params.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/notes/wjc852456_mobilenet_params.txt b/notes/wjc852456_mobilenet_params.txt
new file mode 100644
--- /dev/null	(date 1655739385419)
+++ b/notes/wjc852456_mobilenet_params.txt	(date 1655739385419)
@@ -0,0 +1,137 @@
+module.model.0.0.weight                      : torch.Size([32, 3, 3, 3]) [[[[7.72744623844801e-09, -5.458616225695323e-09, -5.281919346344921e-09], [4.6335109082917825e-09, 3.4911469271037276e-09, 4.048802626499537e-09], [6.171522848319455e-09, 3.634655243445195e-09, 1.0390595939213654e-08]], [[-7.3795369814888545e-09, -8.504819959398446e-09, 8.01743826883694e-09], [-9.60468593547148e-09, 4.14220924227493e-09, -2.009021837778846e-10], [1.6043822936850916e-09, 7.55027151910781e-09, 3.4896334710765586e-09]], [[-5.629608335055991e-09, -6.617381642648468e-10, -6.6885328386945275e-09], [8.808153317829692e-09, 3.834054407292342e-09, 8.377464055797645e-09], [9.306372561468379e-09, 7.17727322019357e-10, 3.99601329803545e-09]]], [[[-3.973664064460536e-09, 7.905152088483192e-09, 3.028901573998155e-09], [-7.166137905301184e-09, 7.562875659061774e-09, -7.460243978130165e-09], [-7.833445891947122e-09, -1.2674675531343382e-08, 6.628515514250921e-09]], [[4.169004585996561e-10, 6.724724777029678e-09, -6.080338010860942e-09], [3.3720375380852374e-09, 3.9386720551704e-09, 4.0495296005360615e-09], [1.2980526653549873e-09, 2.2567414603713587e-09, 4.5092440892346985e-09]], [[-3.641437817947235e-09, -2.7642829691920667e-10, 1.0802948757770992e-08], [1.1239849051492001e-08, -3.6177245643642664e-09, 8.735895562494989e-09], [8.35147417888038e-09, 6.8799472785485705e-09, 7.2946746421109765e-09]]], [[[-0.032424211502075195, 0.03098178654909134, 0.030500512570142746], [-0.021290307864546776, 0.17536413669586182, 0.13320647180080414], [-0.11533961445093155, 0.19261176884174347, 0.33295580744743347]], [[-0.07398947328329086, 0.04539044201374054, 0.046999361366033554], [-0.03549090772867203, 0.26675036549568176, 0.264367938041687], [-0.1862172782421112, 0.28210389614105225, 0.5066822171211243]], [[-0.01028196606785059, -0.0006707774591632187, 0.006773530971258879], [-0.004665158689022064, 0.08210616558790207, 0.0430457778275013], [-0.07747131586074829, 0.08087989687919617, 0.17490236461162567]]], [[[1.4051114050062097e-08, 7.965361703554663e-09, 5.527479363109933e-09], [1.4249797786192175e-08, 3.88861653988215e-09, 2.220532202557024e-09], [9.964051805866347e-09, 6.297914190156462e-09, 1.624099255082001e-08]], [[6.643369854231196e-09, 8.790586925044863e-09, 1.7168231281061708e-08], [2.7632689469925253e-09, 1.5491359306452068e-08, 2.446602920258556e-09], [1.299956675637759e-08, 1.7476002867056195e-08, 1.2662785486838857e-08]], [[-8.921395178163039e-09, -4.296356159727566e-09, -9.699667735674211e-09], [-8.770077108977148e-09, -1.3385066388593714e-08, -5.900758548449403e-09], [-3.4196334652847327e-09, -7.523278888754703e-09, -6.508268368676795e-10]]], [[[-0.06981617957353592, -0.04935180023312569, -0.07998798042535782], [0.30719679594039917, 0.2457541525363922, -0.035586271435022354], [-0.05259264260530472, -0.06383789330720901, -0.031483232975006104]], [[0.02711859717965126, -0.016490105539560318, -0.10439090430736542], [0.5629187822341919, 0.4336528480052948, 0.0012264682445675135], [-0.09836768358945847, -0.10791019350290298, -0.06414677202701569]], [[-0.008011710830032825, -0.014539306983351707, -0.016670215874910355], [0.17541377246379852, 0.11829368770122528, -0.01596309058368206], [-0.05408088490366936, -0.05269676819443703, 0.016155753284692764]]]]
+module.model.0.1.weight                      : torch.Size([32]) [2.336867233054818e-08, 1.1574150526882931e-08, 0.16860461235046387, -1.0262650285142172e-08, 0.16158229112625122]
+module.model.0.1.bias                        : torch.Size([32]) [1.0186679277879307e-09, 1.0238412784246975e-08, 0.442229300737381, -4.138691878097234e-08, 0.4039643108844757]
+module.model.0.1.running_mean                : torch.Size([32]) [-1.8188233141813726e-09, -2.09518513649698e-09, -0.0716647207736969, -3.1543896383823267e-09, -0.03154851868748665]
+module.model.0.1.running_var                 : torch.Size([32]) [3.285963310194098e-15, 4.110690280057167e-15, 5.900162696838379, 1.957126714651706e-14, 1.268470287322998]
+module.model.1.0.weight                      : torch.Size([32, 1, 3, 3]) [[[[1.0374421322012495e-08, 3.3233593654813376e-09, -2.394087428303493e-10], [4.697173761059048e-09, 1.2975003294002363e-09, 4.180257917596464e-09], [4.547231924334483e-09, 9.723639671221918e-10, 4.140725817780577e-10]]], [[[1.404239835522958e-08, 1.7726017986774423e-08, 1.302619079268652e-08], [1.3737047943607195e-08, 1.2395243054186267e-08, 7.874390028916878e-10], [1.5569826317118896e-08, 8.79806005826822e-09, 1.023864881766201e-09]]], [[[0.6892606616020203, 1.9556083679199219, 1.0027391910552979], [-0.35987627506256104, -0.2904965877532959, -0.3600565195083618], [-0.32485246658325195, -1.5465948581695557, -0.7774655818939209]]], [[[6.641988736788562e-09, 2.082081529408697e-08, 5.801795044391156e-09], [4.1017820251454395e-09, 2.5148416682441166e-09, -6.347639747161793e-09], [-1.1371775521240579e-08, -1.973311114511489e-08, -2.4095850648109263e-08]]], [[[0.05838758498430252, 0.11569509655237198, -0.8436937928199768], [0.006628373637795448, -0.33863961696624756, -0.7580291628837585], [-0.012035699561238289, 0.3103720247745514, 1.393568992614746]]]]
+module.model.1.1.weight                      : torch.Size([32]) [-2.8522386674723066e-09, 2.3786324021557448e-09, 0.49262183904647827, 2.121432274293511e-08, 0.34999895095825195]
+module.model.1.1.bias                        : torch.Size([32]) [-2.5914408396943145e-09, -8.713404220372922e-09, 0.16852585971355438, -1.1663973786824045e-08, 0.40878555178642273]
+module.model.1.1.running_mean                : torch.Size([32]) [2.9725780868387317e-17, 9.825150201346784e-16, -0.007908090017735958, -5.605193857299268e-45, -0.0307381022721529]
+module.model.1.1.running_var                 : torch.Size([32]) [5.603060834408036e-36, 4.330511637537707e-33, 0.08728130161762238, 5.605193857299268e-45, 0.02073127031326294]
+module.model.1.3.weight                      : torch.Size([64, 32, 1, 1]) [[[[2.0440471537597205e-09]], [[6.199452062816135e-10]], [[-0.2799168825149536]], [[-1.4633084743920222e-09]], [[0.23365408182144165]]], [[[-4.4688892586464135e-09]], [[4.387867846844529e-09]], [[-0.0036356772761791945]], [[3.640825418926852e-09]], [[-0.02508118934929371]]], [[[-9.79159309189015e-10]], [[9.337228767947181e-10]], [[0.05522887408733368]], [[-1.0462629873586593e-08]], [[0.13022954761981964]]], [[[8.926242855977762e-09]], [[6.333078950149229e-09]], [[0.030802113935351372]], [[2.176910740558924e-08]], [[-0.2451816350221634]]], [[[2.4366850759349745e-09]], [[5.305580974557245e-10]], [[0.024402569979429245]], [[-2.105450480627269e-09]], [[-0.0021633829455822706]]]]
+module.model.1.4.weight                      : torch.Size([64]) [0.17580148577690125, 0.18164518475532532, 0.10661577433347702, 0.10617175698280334, 0.3634781837463379]
+module.model.1.4.bias                        : torch.Size([64]) [0.21502986550331116, 0.17998287081718445, 0.33225274085998535, 0.2570355236530304, 0.13000167906284332]
+module.model.1.4.running_mean                : torch.Size([64]) [-0.10059207677841187, -0.5151125192642212, -0.200637087225914, 0.12351790070533752, -0.8603004217147827]
+module.model.1.4.running_var                 : torch.Size([64]) [0.03051421046257019, 0.02288752794265747, 0.01944854110479355, 0.02014215663075447, 0.07330162078142166]
+module.model.2.0.weight                      : torch.Size([64, 1, 3, 3]) [[[[0.18383581936359406, 0.2724301218986511, -0.008482267148792744], [0.2561420202255249, 0.007982149720191956, -0.21668171882629395], [-0.04117525741457939, -0.1865505576133728, 0.049640294164419174]]], [[[-0.1518166959285736, 0.23363199830055237, 0.16532492637634277], [-0.3139781653881073, 0.09109088778495789, 0.2340034395456314], [-0.17805294692516327, -0.08074962347745895, 0.038094568997621536]]], [[[-0.2811796963214874, 0.3375197649002075, -0.06882116943597794], [0.2947003245353699, -0.4164017140865326, 0.13263776898384094], [0.055265724658966064, -0.0027009714394807816, -0.05132414773106575]]], [[[0.02324344590306282, -0.13233768939971924, -0.21434877812862396], [-0.047896381467580795, 0.2224428802728653, 0.25310611724853516], [-0.02574983611702919, -0.10445432364940643, -0.11086772382259369]]], [[[0.08944493532180786, 0.3121420443058014, 0.3927818834781647], [0.06302770972251892, 0.11046582460403442, 0.11710269004106522], [-0.06285691261291504, -0.22548320889472961, -0.27803051471710205]]]]
+module.model.2.1.weight                      : torch.Size([64]) [0.2685427665710449, 0.20093071460723877, 0.37313312292099, 0.35765671730041504, 0.21092426776885986]
+module.model.2.1.bias                        : torch.Size([64]) [0.2632213830947876, 0.06556907296180725, -0.0010321729350835085, 0.11029840260744095, 0.25845491886138916]
+module.model.2.1.running_mean                : torch.Size([64]) [0.07024136930704117, 0.007359470706433058, -0.0004374147392809391, -0.03539758920669556, 0.1047486662864685]
+module.model.2.1.running_var                 : torch.Size([64]) [0.005982175003737211, 0.001616183784790337, 0.0031352867372334003, 0.003635343397036195, 0.009681410156190395]
+module.model.2.3.weight                      : torch.Size([128, 64, 1, 1]) [[[[-0.09344804286956787]], [[0.03787297010421753]], [[-0.02513216808438301]], [[-0.07237371802330017]], [[0.027517687529325485]]], [[[-0.03660104423761368]], [[0.13641592860221863]], [[-0.020969931036233902]], [[0.019249694421887398]], [[-0.018387239426374435]]], [[[1.6639498667814223e-08]], [[-8.594704503650519e-09]], [[9.014589963385333e-09]], [[-2.1971002794884953e-08]], [[5.8315894335692064e-09]]], [[[-0.02559559792280197]], [[-0.005506166256964207]], [[0.01737190969288349]], [[0.19953003525733948]], [[-0.023443423211574554]]], [[[-5.2464411287589385e-11]], [[1.3699454903814967e-09]], [[-7.0497399029534336e-09]], [[6.142811148635019e-09]], [[-4.148020149585818e-09]]]]
+module.model.2.4.weight                      : torch.Size([128]) [0.26256537437438965, 0.08993346989154816, 6.111882555615011e-09, 0.16221272945404053, 8.72131700191403e-09]
+module.model.2.4.bias                        : torch.Size([128]) [-0.09978681802749634, 0.2115604728460312, -1.0902228098075284e-07, 0.1779460459947586, -1.0956087148628058e-09]
+module.model.2.4.running_mean                : torch.Size([128]) [-0.001699356478638947, 0.08073138445615768, -9.266497014159825e-10, 0.004019340965896845, 1.98884020363721e-08]
+module.model.2.4.running_var                 : torch.Size([128]) [0.09561587870121002, 0.04089532420039177, 3.216530960716479e-15, 0.03404945135116577, 5.2997948228472664e-17]
+module.model.3.0.weight                      : torch.Size([128, 1, 3, 3]) [[[[-0.07898157089948654, -0.09624048322439194, -0.04963984712958336], [-0.03304625302553177, 0.5169569849967957, -0.062329456210136414], [-0.012335398234426975, 0.054680291563272476, -0.02646601013839245]]], [[[-0.067796491086483, -0.10217162221670151, 0.114639513194561], [-0.11924520879983902, -0.17284296452999115, 0.3910475969314575], [-0.058208491653203964, -0.1762879639863968, 0.16259226202964783]]], [[[-3.9177487920483145e-09, -5.7839395495307144e-09, 9.235309406108172e-09], [3.74970809957631e-09, 8.395326034360551e-08, 8.587618616218151e-09], [-9.007289136775398e-09, 1.879270250526588e-08, 4.0627778474799925e-08]]], [[[-0.038476813584566116, -0.07288339734077454, -0.012114033102989197], [-0.03789132460951805, 0.4966874122619629, 0.06326361000537872], [-0.05245034396648407, -0.2559205889701843, -0.075120709836483]]], [[[1.936066411356574e-11, -1.1402254695980218e-09, 6.87939316623698e-10], [-4.4236789231710816e-10, -1.8409254121110052e-09, -2.8454912037734204e-11], [1.868927013148891e-09, 1.8921282596284783e-10, -1.6482096798497992e-09]]]]
+module.model.3.1.weight                      : torch.Size([128]) [0.24296095967292786, 0.3265001177787781, 6.723644219164271e-08, 0.30361780524253845, -5.931781454915352e-11]
+module.model.3.1.bias                        : torch.Size([128]) [-0.05167948082089424, -0.03671051189303398, -6.838612165438462e-08, -0.0018340848619118333, -8.295724662765736e-10]
+module.model.3.1.running_mean                : torch.Size([128]) [0.01137333270162344, -0.007008142303675413, 5.605193857299268e-45, 0.004733565729111433, -5.605193857299268e-45]
+module.model.3.1.running_var                 : torch.Size([128]) [0.001966901123523712, 0.002110331319272518, 5.605193857299268e-45, 0.006256657652556896, 5.605193857299268e-45]
+module.model.3.3.weight                      : torch.Size([128, 128, 1, 1]) [[[[2.0408519318948493e-09]], [[-4.782541918046945e-09]], [[-1.2843884844571107e-09]], [[-4.381244256279615e-09]], [[-4.295550581900898e-09]]], [[[2.724756864580513e-09]], [[4.5708086204854226e-09]], [[2.6693069976602146e-09]], [[-2.0771719899670416e-09]], [[-3.3887384010000687e-09]]], [[[-0.06312761455774307]], [[0.08103185147047043]], [[-1.7652773465215432e-08]], [[-0.04344094172120094]], [[3.818418470302731e-09]]], [[[-0.09259732067584991]], [[0.004920792765915394]], [[-1.0819882767520994e-08]], [[-0.02409759908914566]], [[-2.2236583685497635e-09]]], [[[0.05575406923890114]], [[-0.1461685746908188]], [[6.248991546442539e-09]], [[0.04782847687602043]], [[3.672489423678371e-09]]]]
+module.model.3.4.weight                      : torch.Size([128]) [1.1827673951358975e-08, 4.781481877103033e-09, 0.36796674132347107, 0.227913960814476, -0.14781522750854492]
+module.model.3.4.bias                        : torch.Size([128]) [-1.290738349535303e-10, -2.4284291244569545e-10, -0.00010489737906027585, -0.09140364825725555, 0.17459197342395782]
+module.model.3.4.running_mean                : torch.Size([128]) [-8.478218127550008e-09, -3.2425397922253296e-09, 0.13957977294921875, -0.1896807849407196, -0.12057319283485413]
+module.model.3.4.running_var                 : torch.Size([128]) [3.808174104071629e-17, 3.926498320230399e-17, 0.07984427362680435, 0.032552655786275864, 0.03268050402402878]
+module.model.4.0.weight                      : torch.Size([128, 1, 3, 3]) [[[[-1.3706972223914704e-09, -7.32209681775231e-10, 2.206268279181245e-09], [6.846342937016914e-10, 2.0222592489460567e-09, 1.2237458824060354e-09], [1.5514998175092387e-09, 4.82188233785763e-10, -4.4538212007338984e-10]]], [[[-3.814630555876164e-10, -2.1657702298227832e-09, 1.8983512678483194e-11], [-9.4289143159898e-10, -1.949000516532351e-09, 6.39935673896197e-11], [-1.3141575605501998e-09, 6.065657420784021e-10, 2.6449623047319903e-10]]], [[[-0.05950137972831726, -0.08525779843330383, -0.05921998620033264], [-0.12177059799432755, -0.16357676684856415, -0.13425837457180023], [-0.060584355145692825, -0.11466395854949951, -0.08389744907617569]]], [[[0.06894277781248093, 0.10387926548719406, 0.05689333751797676], [0.1101890504360199, 0.17920169234275818, 0.0993930771946907], [0.058433905243873596, 0.11276925355195999, 0.06642013043165207]]], [[[0.10198019444942474, 0.2094796895980835, 0.09740886092185974], [0.13147230446338654, 0.04600677639245987, -0.1437002420425415], [-0.10880651324987411, -0.15943314135074615, -0.12591923773288727]]]]
+module.model.4.1.weight                      : torch.Size([128]) [9.602237754924303e-11, 1.949981287552305e-09, 0.4602643549442291, 0.15596903860569, 0.2842099964618683]
+module.model.4.1.bias                        : torch.Size([128]) [-1.558860707184806e-09, -2.1406374450805288e-09, -0.02001080848276615, 0.14706575870513916, -0.02752126008272171]
+module.model.4.1.running_mean                : torch.Size([128]) [5.605193857299268e-45, -5.605193857299268e-45, -0.11925189197063446, 0.033371344208717346, 0.005677065346390009]
+module.model.4.1.running_var                 : torch.Size([128]) [5.605193857299268e-45, 5.605193857299268e-45, 0.011173143051564693, 0.0013772583333775401, 0.0025158487260341644]
+module.model.4.3.weight                      : torch.Size([256, 128, 1, 1]) [[[[3.592839803445713e-09]], [[-4.69225192034628e-09]], [[0.03393292427062988]], [[0.016603520140051842]], [[0.02514493837952614]]], [[[-3.2599560828572294e-09]], [[3.895806344189623e-09]], [[0.013648785650730133]], [[-0.08253834396600723]], [[-0.0556369423866272]]], [[[-1.9997827838125204e-09]], [[-3.862245190333624e-09]], [[0.08373857289552689]], [[-0.027147598564624786]], [[0.00486077880486846]]], [[[-1.0252245719044595e-09]], [[4.407698650510383e-09]], [[-0.023714497685432434]], [[0.014681159518659115]], [[0.0014883163385093212]]], [[[-3.3893499118420323e-10]], [[-3.0356241964568653e-09]], [[0.025130078196525574]], [[-0.029620584100484848]], [[0.05420038104057312]]]]
+module.model.4.4.weight                      : torch.Size([256]) [0.1873362809419632, 0.1378195583820343, 0.13753049075603485, 0.15622565150260925, 0.11030229926109314]
+module.model.4.4.bias                        : torch.Size([256]) [0.020143097266554832, 0.17269274592399597, 0.1743103265762329, 0.17542465031147003, 0.24046871066093445]
+module.model.4.4.running_mean                : torch.Size([256]) [-0.23667645454406738, 0.08853915333747864, 0.046589989215135574, -0.17193152010440826, 0.05397862195968628]
+module.model.4.4.running_var                 : torch.Size([256]) [0.05403273180127144, 0.02880857326090336, 0.02532765083014965, 0.04687981680035591, 0.047322530299425125]
+module.model.5.0.weight                      : torch.Size([256, 1, 3, 3]) [[[[-0.0030088364146649837, -0.037888601422309875, -0.010826284997165203], [-0.08136821538209915, 0.43265122175216675, 0.05347670987248421], [-0.03126648813486099, 0.09186448901891708, -0.02501857466995716]]], [[[0.08729500323534012, 0.2533911466598511, -0.0032470938749611378], [0.1767907589673996, -0.046007025986909866, -0.22572891414165497], [-0.043510910123586655, -0.19505217671394348, 0.023304104804992676]]], [[[-0.025382015854120255, 0.04426657781004906, 0.1705932915210724], [-0.09415581077337265, -0.023956501856446266, 0.2492864429950714], [-0.1875024139881134, -0.17815062403678894, 0.03552478179335594]]], [[[-0.04248717427253723, 0.05488980561494827, 0.14121204614639282], [-0.22816208004951477, -0.02521711215376854, 0.30250465869903564], [-0.17181579768657684, -0.15011020004749298, 0.06918855011463165]]], [[[0.005758552346378565, -0.1377614587545395, -0.03766517713665962], [-0.13598497211933136, -0.24568569660186768, 0.03327295184135437], [-0.0007263329462148249, 0.3241155743598938, 0.16966907680034637]]]]
+module.model.5.1.weight                      : torch.Size([256]) [0.19251079857349396, 0.2732016444206238, 0.2782284915447235, 0.3137137293815613, 0.3769991993904114]
+module.model.5.1.bias                        : torch.Size([256]) [0.10985797643661499, 0.008996669203042984, -0.02667521871626377, -0.0413973331451416, -0.11325553804636002]
+module.model.5.1.running_mean                : torch.Size([256]) [0.031815305352211, 0.003563534701243043, -0.0016054187435656786, -0.008724555373191833, -0.01078799832612276]
+module.model.5.1.running_var                 : torch.Size([256]) [0.0028445874340832233, 0.0019812756218016148, 0.003398863598704338, 0.003193249460309744, 0.0017005815170705318]
+module.model.5.3.weight                      : torch.Size([256, 256, 1, 1]) [[[[-0.0027856691740453243]], [[-0.0445554256439209]], [[-0.009154293686151505]], [[0.0026423095259815454]], [[-0.025387922301888466]]], [[[0.05866413190960884]], [[0.09148110449314117]], [[0.11154504865407944]], [[-0.0018499931320548058]], [[-0.020428044721484184]]], [[[0.04005797207355499]], [[-0.007409640587866306]], [[-0.011358074843883514]], [[-0.025159602984786034]], [[0.030427897348999977]]], [[[-0.013917137868702412]], [[0.06577862799167633]], [[0.0017746842931956053]], [[-0.008511228486895561]], [[0.057290028780698776]]], [[[0.015912124887108803]], [[-0.06157216429710388]], [[0.025198888033628464]], [[0.08195812255144119]], [[-0.0538768507540226]]]]
+module.model.5.4.weight                      : torch.Size([256]) [0.19095978140830994, 0.2125549167394638, 0.22696229815483093, 0.21464227139949799, 0.11635814607143402]
+module.model.5.4.bias                        : torch.Size([256]) [-0.1840674728155136, -0.05222223699092865, -0.1354823112487793, -0.05452979728579521, 0.16809798777103424]
+module.model.5.4.running_mean                : torch.Size([256]) [-0.018242815509438515, 0.07670722156763077, 0.24652689695358276, 0.14024029672145844, -0.17197582125663757]
+module.model.5.4.running_var                 : torch.Size([256]) [0.03626541420817375, 0.06492948532104492, 0.038702342659235, 0.04933242127299309, 0.029747705906629562]
+module.model.6.0.weight                      : torch.Size([256, 1, 3, 3]) [[[[0.03473038598895073, 0.08438992500305176, 0.07307318598031998], [0.08041919022798538, 0.15572378039360046, 0.1387418657541275], [0.06290118396282196, 0.13014967739582062, 0.10303634405136108]]], [[[0.03721035644412041, 0.0882585346698761, 0.06792138516902924], [0.07306160032749176, 0.17900732159614563, 0.1400006115436554], [0.054727815091609955, 0.12322694808244705, 0.08695296943187714]]], [[[0.036698710173368454, 0.08646062016487122, 0.06361176073551178], [0.08885952830314636, 0.15303418040275574, 0.13786594569683075], [0.07000722736120224, 0.13816821575164795, 0.11538078635931015]]], [[[-0.03471599891781807, -0.08481031656265259, -0.06256720423698425], [-0.08496475219726562, -0.15836362540721893, -0.13184812664985657], [-0.05684154853224754, -0.13971170783042908, -0.10678485780954361]]], [[[0.08980470895767212, 0.14828063547611237, 0.08501461148262024], [0.10903584957122803, 0.05691084638237953, -0.07600218802690506], [-0.0839156061410904, -0.17267262935638428, -0.1611030548810959]]]]
+module.model.6.1.weight                      : torch.Size([256]) [0.19446074962615967, 0.1655748039484024, 0.17623679339885712, 0.18821531534194946, 0.256429523229599]
+module.model.6.1.bias                        : torch.Size([256]) [0.10750357806682587, 0.19148412346839905, 0.0981709286570549, 0.4342052638530731, -0.023233745247125626]
+module.model.6.1.running_mean                : torch.Size([256]) [0.019450698047876358, 0.04579053074121475, 0.029319386929273605, -0.045471515506505966, -0.004434337839484215]
+module.model.6.1.running_var                 : torch.Size([256]) [0.001984241884201765, 0.0016397975850850344, 0.001498306985013187, 0.002206068253144622, 0.0014111656928434968]
+module.model.6.3.weight                      : torch.Size([512, 256, 1, 1]) [[[[-0.10724501311779022]], [[0.017995545640587807]], [[-0.05989837646484375]], [[0.0074358535930514336]], [[-0.03189614787697792]]], [[[0.001097396481782198]], [[-0.014834650792181492]], [[-0.02759149856865406]], [[-0.01983139105141163]], [[0.06613185256719589]]], [[[0.005013992544263601]], [[0.04682302474975586]], [[-0.018240414559841156]], [[-0.02986847050487995]], [[0.08492109179496765]]], [[[-0.011959673836827278]], [[-0.021522698923945427]], [[-0.04945692792534828]], [[-0.02357652597129345]], [[-0.03031003661453724]]], [[[0.024621041491627693]], [[-0.007590343710035086]], [[0.005650930106639862]], [[-0.007276531308889389]], [[0.01116054505109787]]]]
+module.model.6.4.weight                      : torch.Size([512]) [0.09640679508447647, 0.15556171536445618, 0.12476795166730881, 0.18503797054290771, 0.13744214177131653]
+module.model.6.4.bias                        : torch.Size([512]) [0.1729125827550888, -0.08901625871658325, 0.16018132865428925, 0.1429561823606491, 0.12679395079612732]
+module.model.6.4.running_mean                : torch.Size([512]) [-0.3361724019050598, 0.025196824222803116, 0.0034789906349033117, -0.056287169456481934, -0.09689648449420929]
+module.model.6.4.running_var                 : torch.Size([512]) [0.0398552343249321, 0.021297398954629898, 0.03956937417387962, 0.05825844407081604, 0.02987006865441799]
+module.model.7.0.weight                      : torch.Size([512, 1, 3, 3]) [[[[-0.03165639564394951, -0.09537026286125183, -0.035795241594314575], [-0.08236392587423325, 0.4951254725456238, -0.061991751194000244], [-0.0176780316978693, -0.020178768783807755, -0.0018328555161133409]]], [[[-0.027635959908366203, 0.011573252268135548, 0.33974868059158325], [-0.18001176416873932, -0.016215743497014046, 0.10919950902462006], [-0.091253861784935, -0.10598982125520706, -0.04191604629158974]]], [[[0.0839274674654007, 0.29141995310783386, 0.12957480549812317], [-0.09737775474786758, -0.1164296492934227, -0.14009223878383636], [-0.03138355910778046, -0.11603162437677383, -0.040655605494976044]]], [[[-0.015686385333538055, -0.06975299119949341, -0.004987312946468592], [-0.06980139017105103, -0.15588322281837463, -0.06549298018217087], [-0.04162592813372612, -0.09670186787843704, -0.023987676948308945]]], [[[0.09443487972021103, 0.3132927417755127, 0.05895277485251427], [-0.02497110329568386, -0.049967847764492035, -0.05053405836224556], [-0.042110662907361984, -0.2608948349952698, -0.04612448811531067]]]]
+module.model.7.1.weight                      : torch.Size([512]) [0.16985344886779785, 0.16740718483924866, 0.30571770668029785, 0.2864709794521332, 0.253362774848938]
+module.model.7.1.bias                        : torch.Size([512]) [0.2347683161497116, 0.1766754388809204, -0.1115022599697113, 0.04869099706411362, -0.019534602761268616]
+module.model.7.1.running_mean                : torch.Size([512]) [0.03143367916345596, -0.000630914350040257, -0.011082391254603863, -0.07863780856132507, -0.002186762634664774]
+module.model.7.1.running_var                 : torch.Size([512]) [0.0008779646013863385, 0.0010637693339958787, 0.0020536156371235847, 0.0054786475375294685, 0.0020402472000569105]
+module.model.7.3.weight                      : torch.Size([512, 512, 1, 1]) [[[[2.5171289053105284e-08]], [[-7.946963620497627e-08]], [[-1.3946144861165521e-07]], [[5.360286881028742e-09]], [[-7.363944121152599e-08]]], [[[0.005520035047084093]], [[-0.023044971749186516]], [[-0.0013560873921960592]], [[0.04461139440536499]], [[0.028123529627919197]]], [[[-0.007735461462289095]], [[-0.008721524849534035]], [[0.006861571688205004]], [[-0.040898069739341736]], [[0.012813958339393139]]], [[[0.01711864396929741]], [[0.10865398496389389]], [[-0.009544146247208118]], [[0.005190859083086252]], [[0.007301398552954197]]], [[[0.09533056616783142]], [[0.03066256083548069]], [[0.016455713659524918]], [[0.05607875436544418]], [[-0.017534786835312843]]]]
+module.model.7.4.weight                      : torch.Size([512]) [3.34184520056624e-08, 0.15389923751354218, 0.15817482769489288, 0.178486168384552, 0.12461748719215393]
+module.model.7.4.bias                        : torch.Size([512]) [-3.503047025787964e-07, -0.06315642595291138, -0.01696142740547657, -0.06619490683078766, 0.08194977790117264]
+module.model.7.4.running_mean                : torch.Size([512]) [-3.259567336044711e-07, -0.07486260682344437, -0.09634383767843246, -0.021436693146824837, 0.0618126317858696]
+module.model.7.4.running_var                 : torch.Size([512]) [5.51904171235823e-14, 0.024192124605178833, 0.021580854430794716, 0.031292978674173355, 0.02784941904246807]
+module.model.8.0.weight                      : torch.Size([512, 1, 3, 3]) [[[[2.2979311609105935e-07, 1.6307373584822926e-07, 8.761514891375555e-08], [2.08296370374228e-07, -1.858895481987588e-09, -1.0739732658748835e-07], [1.3957513544937683e-07, -1.1190623894208329e-07, -1.3926637620897964e-07]]], [[[0.011984999291598797, 0.03557803854346275, 0.023674258962273598], [0.03687810152769089, 0.13084620237350464, 0.018742691725492477], [0.0948280543088913, 0.07963316887617111, 0.07896362245082855]]], [[[0.004612872842699289, -0.001859290525317192, 0.0018486060434952378], [0.02482408843934536, 0.2829265296459198, 0.027928799390792847], [0.012511461041867733, 0.014877994544804096, 0.021263249218463898]]], [[[-0.01332615502178669, 0.011030254885554314, 0.0810728594660759], [0.010304519906640053, 0.25794151425361633, 0.02609764225780964], [0.08401916176080704, 0.06297894567251205, 0.0016747958725318313]]], [[[-0.08160682022571564, -0.13414406776428223, -0.04120487719774246], [0.016232889145612717, -0.23181848227977753, 0.02684617042541504], [0.0506468266248703, 0.15682801604270935, 0.04481338709592819]]]]
+module.model.8.1.weight                      : torch.Size([512]) [4.037149210489588e-07, 0.1525450348854065, 0.18912939727306366, 0.15877577662467957, 0.14218704402446747]
+module.model.8.1.bias                        : torch.Size([512]) [-1.7922852180163318e-07, -0.029970237985253334, 0.0009158671018667519, 0.01670246571302414, 0.34520062804222107]
+module.model.8.1.running_mean                : torch.Size([512]) [5.605193857299268e-45, 0.01520517561584711, 0.020257702097296715, 0.019413655623793602, -0.02245434559881687]
+module.model.8.1.running_var                 : torch.Size([512]) [5.605193857299268e-45, 0.0003724964917637408, 0.0008366321562789381, 0.0009044921607710421, 0.0008148984052240849]
+module.model.8.3.weight                      : torch.Size([512, 512, 1, 1]) [[[[7.068261709264334e-08]], [[-0.041906822472810745]], [[0.03797784075140953]], [[-0.00041527723078615963]], [[0.01523990835994482]]], [[[-1.1799476951068755e-08]], [[-0.004559671971946955]], [[-0.006189656909555197]], [[0.004387981723994017]], [[0.004029638599604368]]], [[[-8.037434895413753e-08]], [[0.01177976280450821]], [[-0.02300087921321392]], [[-0.03271718695759773]], [[0.15578779578208923]]], [[[-1.0892814117369198e-07]], [[4.5736469473922625e-06]], [[-2.953874627564801e-06]], [[-4.4972653086006176e-06]], [[-9.829892633206327e-07]]], [[[3.289379790771818e-08]], [[0.006259423214942217]], [[-0.018266014754772186]], [[-0.02438933588564396]], [[0.010183243080973625]]]]
+module.model.8.4.weight                      : torch.Size([512]) [0.1334839016199112, -0.0047843847423791885, 0.1496553122997284, -4.140931196161546e-06, 0.14272968471050262]
+module.model.8.4.bias                        : torch.Size([512]) [0.03005252406001091, -0.03176083415746689, -0.07241553068161011, -3.090858444920741e-05, 0.05294700339436531]
+module.model.8.4.running_mean                : torch.Size([512]) [0.10574270784854889, -0.007877864874899387, 0.06780349463224411, -1.7755459339241497e-05, 0.1272619217634201]
+module.model.8.4.running_var                 : torch.Size([512]) [0.017784491181373596, 0.0003179314371664077, 0.02662098966538906, 1.562170393043516e-10, 0.042312778532505035]
+module.model.9.0.weight                      : torch.Size([512, 1, 3, 3]) [[[[0.01718149520456791, -0.06033838540315628, 0.019990485161542892], [0.15761375427246094, -0.2188204526901245, 0.15380185842514038], [0.02844095602631569, -0.05914418771862984, 0.02311825193464756]]], [[[-0.0023224903270602226, 0.0019838339649140835, 0.0004091905720997602], [-0.007815535180270672, 0.021234629675745964, 0.0017248307121917605], [0.00543570052832365, 0.018434938043355942, 0.005932406056672335]]], [[[-0.006375816185027361, 0.02071327157318592, 0.01718149520456791], [0.012405510060489178, 0.24397359788417816, 0.007844008505344391], [0.003966125659644604, 0.0404122993350029, 0.029678691178560257]]], [[[-5.62730156161706e-06, 1.3413400665740483e-05, 6.002304417052073e-06], [9.084432349482086e-06, 1.2320867426751647e-05, 7.928487320896238e-06], [-8.078882274276111e-06, -2.701543962757569e-06, -5.992965270706918e-06]]], [[[0.005945245269685984, -0.003468491369858384, 0.009776769205927849], [-0.015522989444434643, 0.38974297046661377, 0.006730230990797281], [-0.00497031956911087, -0.051246583461761475, -0.005328647792339325]]]]
+module.model.9.1.weight                      : torch.Size([512]) [0.2561950385570526, 0.02741575613617897, 0.20054380595684052, 1.6868041711859405e-05, 0.21480338275432587]
+module.model.9.1.bias                        : torch.Size([512]) [0.017453109845519066, -0.004333662334829569, -0.08680632710456848, -1.7840358850662597e-05, 0.1307271122932434]
+module.model.9.1.running_mean                : torch.Size([512]) [0.002679241821169853, 5.605193857299268e-45, 0.010921865701675415, 5.605193857299268e-45, 0.028364693745970726]
+module.model.9.1.running_var                 : torch.Size([512]) [0.0004644645086955279, 5.605193857299268e-45, 0.0003981583868153393, 5.605193857299268e-45, 0.0016936665633693337]
+module.model.9.3.weight                      : torch.Size([512, 512, 1, 1]) [[[[-4.203201786623367e-09]], [[-1.1090371954125544e-09]], [[6.277841579915844e-10]], [[7.429718174023492e-09]], [[-2.3466537601990467e-09]]], [[[-0.04162992537021637]], [[-0.0007954733446240425]], [[-0.012702800333499908]], [[-1.2922998848807765e-06]], [[0.01758558861911297]]], [[[1.327513932114499e-10]], [[1.6483756581919806e-09]], [[3.739839549155022e-10]], [[1.1377996322892159e-09]], [[-8.366968923256835e-11]]], [[[-0.056655798107385635]], [[-0.005684100091457367]], [[0.013314345851540565]], [[3.249076371503179e-06]], [[0.012275002896785736]]], [[[-0.032713696360588074]], [[0.004313254728913307]], [[-0.024739405140280724]], [[2.0557804418785963e-06]], [[-0.013262147083878517]]]]
+module.model.9.4.weight                      : torch.Size([512]) [-9.819374480191101e-11, 0.1665959507226944, 5.600303509822879e-08, 0.15005317330360413, 0.18271693587303162]
+module.model.9.4.bias                        : torch.Size([512]) [-2.8796826256893837e-08, 0.018247341737151146, -4.187883018342588e-14, -0.021700093522667885, 0.170516699552536]
+module.model.9.4.running_mean                : torch.Size([512]) [-3.2754019940739454e-08, 0.25455883145332336, -6.972916466452261e-09, 0.07794366776943207, 0.288482129573822]
+module.model.9.4.running_var                 : torch.Size([512]) [2.284085487462101e-16, 0.02175033651292324, 1.9738600675769073e-17, 0.02899712510406971, 0.03140289708971977]
+module.model.10.0.weight                     : torch.Size([512, 1, 3, 3]) [[[[1.5707399825259927e-08, 1.4323306096741817e-08, 9.629497199625803e-09], [3.6299292460739707e-09, 6.169390331933755e-09, 3.928812830622519e-09], [7.27102822395409e-10, 1.4196807063271422e-09, 8.115611294101654e-09]]], [[[-0.06356275826692581, -0.028245709836483, -0.07261505722999573], [-0.041335463523864746, -0.049028921872377396, -0.050962917506694794], [-0.06125392019748688, -0.032780032604932785, -0.05049733817577362]]], [[[6.856774592556292e-10, -4.935591380039739e-10, 7.451208539066556e-10], [-3.2719094794630976e-11, -5.459934726559368e-10, 1.5824525023688807e-10], [-1.4619372379343076e-10, -5.648720380335703e-10, 8.388627015243344e-10]]], [[[0.15893645584583282, 0.16147632896900177, 0.1735629439353943], [-0.02633063867688179, -0.2459278255701065, -0.0411628820002079], [0.0007409437093883753, -0.12116163223981857, -0.008329655975103378]]], [[[-0.14434467256069183, -0.21047574281692505, -0.15772667527198792], [-0.018704703077673912, -0.01642107591032982, -0.033160705119371414], [0.02748643048107624, 0.2249932438135147, 0.04763992503285408]]]]
+module.model.10.1.weight                     : torch.Size([512]) [3.112492663603916e-08, 0.14998559653759003, 7.304885168979425e-11, 0.1569746881723404, 0.3637317419052124]
+module.model.10.1.bias                       : torch.Size([512]) [-9.344413243184135e-09, 0.0915805771946907, -6.218940917790405e-10, 0.3765603005886078, -0.16215024888515472]
+module.model.10.1.running_mean               : torch.Size([512]) [5.605193857299268e-45, -0.02777620032429695, 5.886473369441496e-24, -0.00033284228993579745, -0.04750896990299225]
+module.model.10.1.running_var                : torch.Size([512]) [5.605193857299268e-45, 0.0005845861160196364, 5.605193857299268e-45, 0.0007151465979404747, 0.004185951314866543]
+module.model.10.3.weight                     : torch.Size([512, 512, 1, 1]) [[[[2.533541154647878e-09]], [[-2.2554892675774596e-10]], [[-5.524251056598928e-10]], [[-1.346643768718181e-10]], [[-1.7831982557225956e-09]]], [[[-4.195748748436756e-10]], [[0.006472560111433268]], [[-7.084889341868461e-10]], [[0.011881720274686813]], [[0.02518722414970398]]], [[[-2.8838333943070893e-09]], [[0.057545363903045654]], [[2.31689289975634e-09]], [[0.05945393443107605]], [[-0.010721507482230663]]], [[[-4.591827806876836e-09]], [[0.0003646005061455071]], [[7.543312641189459e-10]], [[-0.006268071476370096]], [[0.011354216374456882]]], [[[-2.9320392780363136e-09]], [[0.0260610394179821]], [[7.828178660851393e-10]], [[0.020663121715188026]], [[-0.002030040370300412]]]]
+module.model.10.4.weight                     : torch.Size([512]) [1.4708942952523785e-09, 0.14337562024593353, 0.19202372431755066, 0.12414129823446274, 0.21623273193836212]
+module.model.10.4.bias                       : torch.Size([512]) [-2.1719783305229612e-08, 0.10133624076843262, -0.04623369500041008, 0.2642516493797302, -0.024501966312527657]
+module.model.10.4.running_mean               : torch.Size([512]) [1.194461862752405e-08, 0.05431459844112396, -0.05902715399861336, 0.06755128502845764, 0.12908707559108734]
+module.model.10.4.running_var                : torch.Size([512]) [1.831841494382127e-16, 0.02123996801674366, 0.03682195395231247, 0.022042853757739067, 0.03528040647506714]
+module.model.11.0.weight                     : torch.Size([512, 1, 3, 3]) [[[[-6.188690448993839e-09, -3.7438949718193726e-09, -6.859680823367853e-09], [-2.0774890696628745e-09, -7.065824036978086e-10, -3.5379357221643204e-09], [-3.942890902663976e-09, -3.6161538208290267e-09, -6.10371309051061e-09]]], [[[-0.16405019164085388, -0.039445266127586365, 0.12065880000591278], [-0.11722450703382492, 0.0858854353427887, 0.1736585795879364], [-0.16070936620235443, -0.05269193276762962, 0.08227246254682541]]], [[[-0.03810027986764908, -0.05406758934259415, -0.05153641477227211], [-0.057221584022045135, -0.06315888464450836, -0.08575347810983658], [-0.020219366997480392, -0.08450397104024887, -0.028495796024799347]]], [[[-0.019900236278772354, -0.10632628202438354, -0.043737102299928665], [-0.07807891070842743, -0.0517553836107254, -0.07770536839962006], [-0.04516107216477394, -0.07367411255836487, -0.043857086449861526]]], [[[-0.023672468960285187, -0.05762311443686485, -0.037915006279945374], [-0.05808023363351822, -0.05751677602529526, -0.10510175675153732], [-0.04127185046672821, -0.12834112346172333, -0.06359098851680756]]]]
+module.model.11.1.weight                     : torch.Size([512]) [5.200373465186203e-08, 0.3151218891143799, 0.11753973364830017, 0.3068965971469879, 0.2396165430545807]
+module.model.11.1.bias                       : torch.Size([512]) [1.1352160100841502e-08, -0.149959534406662, 0.4103224575519562, -0.14930091798305511, 0.22895698249340057]
+module.model.11.1.running_mean               : torch.Size([512]) [-5.605193857299268e-45, -0.0053673372603952885, -0.021398555487394333, -0.12988440692424774, -0.0301534291356802]
+module.model.11.1.running_var                : torch.Size([512]) [5.605193857299268e-45, 0.001706151757389307, 0.0006295106140896678, 0.0020652953535318375, 0.0029962891712784767]
+module.model.11.3.weight                     : torch.Size([512, 512, 1, 1]) [[[[3.184116303955875e-09]], [[0.005700759589672089]], [[-0.03866574540734291]], [[0.022070199251174927]], [[0.015238906256854534]]], [[[-2.286601796797072e-09]], [[0.004387443419545889]], [[-0.0065901135094463825]], [[0.015695860609412193]], [[0.07386597990989685]]], [[[2.376724372865624e-09]], [[0.01464707963168621]], [[0.04245419055223465]], [[-0.03512439876794815]], [[0.03348171338438988]]], [[[9.199731948461576e-11]], [[0.009470760822296143]], [[0.06804131716489792]], [[-0.08015453070402145]], [[-0.06524327397346497]]], [[[-8.043459231998895e-09]], [[0.0004486207908485085]], [[-0.0004499814531300217]], [[-0.00011288867972325534]], [[0.00032458113855682313]]]]
+module.model.11.4.weight                     : torch.Size([512]) [0.17498154938220978, 0.04671353101730347, 0.15697982907295227, 0.18707360327243805, -4.986648036719998e-06]
+module.model.11.4.bias                       : torch.Size([512]) [-0.09225665777921677, 0.15978607535362244, -0.027459044009447098, -0.15350492298603058, -0.0023318829480558634]
+module.model.11.4.running_mean               : torch.Size([512]) [0.36446234583854675, -0.16552969813346863, -0.17914973199367523, 0.24667084217071533, -2.9073401037749136e-06]
+module.model.11.4.running_var                : torch.Size([512]) [0.03139934316277504, 0.017542392015457153, 0.0186384916305542, 0.030030911788344383, 2.476605686752009e-06]
+module.model.12.0.weight                     : torch.Size([512, 1, 3, 3]) [[[[0.018408456817269325, 0.04016359522938728, 0.03788229078054428], [0.042698875069618225, 0.09196614474058151, 0.0738513171672821], [0.0371137298643589, 0.08147350698709488, 0.06942056119441986]]], [[[0.01390250213444233, -0.03349212929606438, -0.04096963256597519], [-0.02839098684489727, -0.0833420678973198, -0.06396706402301788], [-0.043355733156204224, -0.10168173909187317, -0.10033819824457169]]], [[[-0.013811224140226841, -0.050294890999794006, -0.03851911425590515], [-0.039868153631687164, -0.06385993212461472, -0.0653429627418518], [-0.04155278205871582, -0.05857948213815689, -0.06012807413935661]]], [[[0.038619041442871094, 0.046973709017038345, 0.05315038189291954], [0.04501649737358093, 0.08276955038309097, 0.08142153918743134], [0.04530902951955795, 0.08109541982412338, 0.07744719088077545]]], [[[0.00043534417636692524, 0.0005290208500809968, 0.0005179776926524937], [0.00039217370795086026, 0.00026364027871750295, 0.0004603253910318017], [0.0005576001713052392, 0.00046454512630589306, 0.0005883210687898099]]]]
+module.model.12.1.weight                     : torch.Size([512]) [0.1972341388463974, 0.1947522759437561, 0.1213587298989296, 0.2588917016983032, 0.0014480504905804992]
+module.model.12.1.bias                       : torch.Size([512]) [0.09399579465389252, 0.04014911875128746, 0.4415118098258972, 0.057474080473184586, 0.00046655599726364017]
+module.model.12.1.running_mean               : torch.Size([512]) [0.012936670333147049, -0.07428813725709915, -0.018450893461704254, 0.009996647015213966, 5.605193857299268e-45]
+module.model.12.1.running_var                : torch.Size([512]) [0.0009531023679301143, 0.000356436736183241, 0.0005804872489534318, 0.0007684908923693001, 5.605193857299268e-45]
+module.model.12.3.weight                     : torch.Size([1024, 512, 1, 1]) [[[[1.4030652195629045e-08]], [[-4.154279764634339e-08]], [[3.363269485134879e-08]], [[-9.752529894768713e-10]], [[3.418082528128252e-08]]], [[[0.035241223871707916]], [[-0.043332383036613464]], [[-0.014266212470829487]], [[0.11227577179670334]], [[5.550782589125447e-05]]], [[[-5.653250756409989e-09]], [[4.370879658210924e-09]], [[6.672428387588525e-09]], [[-6.361773774443691e-09]], [[-1.3663091991134024e-08]]], [[[-0.0008692902629263699]], [[-0.0017318383324891329]], [[0.0006836351240053773]], [[0.0022101097274571657]], [[-0.0002464116842020303]]], [[[0.04629046842455864]], [[0.04108394682407379]], [[-0.08732009679079056]], [[-0.021487515419721603]], [[-0.00013814105477649719]]]]
+module.model.12.4.weight                     : torch.Size([1024]) [2.4510656615461812e-08, 0.17709092795848846, -1.3125401210345444e-08, 0.000978913507424295, 0.17576538026332855]
+module.model.12.4.bias                       : torch.Size([1024]) [-2.0753574858645152e-07, -0.1242271214723587, -7.581852656812771e-08, -0.01564161479473114, -0.12779158353805542]
+module.model.12.4.running_mean               : torch.Size([1024]) [-7.000041080118535e-08, 0.0417206808924675, -1.5674864073389472e-08, -0.013991608284413815, 0.029819274321198463]
+module.model.12.4.running_var                : torch.Size([1024]) [1.229069709234639e-14, 0.04122481867671013, 1.8290770170703054e-15, 0.0001106768031604588, 0.05329441651701927]
+module.model.13.0.weight                     : torch.Size([1024, 1, 3, 3]) [[[[-5.753827636567621e-08, -3.713019580686705e-08, -4.691357702313326e-08], [-2.3255578796010923e-08, 1.6311508810318287e-09, -5.581040074531529e-09], [-4.8131933994000065e-08, -3.0485249880030096e-08, -3.622311339768203e-08]]], [[[-0.026404256001114845, -0.016194600611925125, -0.026828119531273842], [-0.017330601811408997, -0.009487836621701717, -0.017738614231348038], [-0.025363290682435036, -0.01616939716041088, -0.02704097144305706]]], [[[-2.3145416250258677e-08, 1.6301747507441178e-08, 2.2064471139060515e-08], [-7.044835825809059e-09, 2.4787816244042915e-08, 2.025631928859184e-08], [-2.871112947389065e-08, 1.7302355104220624e-08, 3.0189010402636995e-08]]], [[[-0.0027891062200069427, -0.0005286437808535993, -0.002897305181249976], [-0.0022802622988820076, -0.0008562813745811582, -0.0018522365717217326], [-0.0037975239101797342, -0.0026783570647239685, -0.004014885518699884]]], [[[-0.02039419859647751, -0.012710422277450562, -0.020411960780620575], [-0.01443422120064497, -0.008514480665326118, -0.0148154366761446], [-0.020397493615746498, -0.012777134776115417, -0.021079616621136665]]]]
+module.model.13.1.weight                     : torch.Size([1024]) [1.8699161330459901e-07, 0.10373570024967194, 7.247732014548092e-08, 0.006687782239168882, 0.13886098563671112]
+module.model.13.1.bias                       : torch.Size([1024]) [1.9513669258230948e-07, 0.4567657709121704, -2.5769834266498037e-08, 0.022705167531967163, 0.445081502199173]
+module.model.13.1.running_mean               : torch.Size([1024]) [-5.605193857299268e-45, -0.0022089765407145023, 5.605193857299268e-45, -5.605193857299268e-45, -0.0012372019700706005]
+module.model.13.1.running_var                : torch.Size([1024]) [5.605193857299268e-45, 1.58588845806662e-05, 5.605193857299268e-45, 5.605193857299268e-45, 6.968373782001436e-06]
+module.model.13.3.weight                     : torch.Size([1024, 1024, 1, 1]) [[[[6.341848157731533e-10]], [[0.030243054032325745]], [[-1.3644837482118533e-09]], [[-0.0017267413204535842]], [[-0.02090410143136978]]], [[[-7.750739428047382e-08]], [[-0.025396520271897316]], [[6.130528085179776e-09]], [[0.0023136837407946587]], [[0.02341466210782528]]], [[[-3.3523910314414707e-09]], [[-0.004147232510149479]], [[1.5471383896237256e-10]], [[-0.0010349593358114362]], [[-0.0033079548738896847]]], [[[-3.0954705465546795e-08]], [[0.007334284018725157]], [[-1.656740189481809e-09]], [[0.0014653243124485016]], [[0.027494316920638084]]], [[[-5.280492931802883e-09]], [[0.0196089930832386]], [[5.720638407424872e-10]], [[0.0002888769959099591]], [[0.005881515331566334]]]]
+module.model.13.4.weight                     : torch.Size([1024]) [1.5019896030426025, 1.6344594955444336, 1.0673714876174927, 1.403012752532959, 1.17611563205719]
+module.model.13.4.bias                       : torch.Size([1024]) [0.06278648227453232, -0.02795829251408577, 0.08881659060716629, 0.06536435335874557, 0.05160292237997055]
+module.model.13.4.running_mean               : torch.Size([1024]) [0.04384895786643028, -0.07330264151096344, -0.0812990590929985, 0.11620361357927322, 0.04215483367443085]
+module.model.13.4.running_var                : torch.Size([1024]) [0.0019914312288165092, 0.002538580447435379, 0.0010253670625388622, 0.002015078440308571, 0.0013223042478784919]
+module.fc.weight                             : torch.Size([1000, 1024]) []
+module.fc.bias                               : torch.Size([1000]) [-0.009564820677042007, 0.012628099881112576, -0.022653093561530113, -0.027040593326091766, 0.015423423610627651]
\ No newline at end of file
Index: notes/tf_mobilenet_summary.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/notes/tf_mobilenet_summary.txt b/notes/tf_mobilenet_summary.txt
new file mode 100644
--- /dev/null	(date 1655717327878)
+++ b/notes/tf_mobilenet_summary.txt	(date 1655717327878)
@@ -0,0 +1,223 @@
+Model: "mobilenet_1.00_224"
+_________________________________________________________________
+ Layer (type)                Output Shape              Param #   
+=================================================================
+ input_1 (InputLayer)        [(None, 224, 224, 3)]     0         
+                                                                 
+ conv1 (Conv2D)              (None, 112, 112, 32)      864       
+                                                                 
+ conv1_bn (BatchNormalizatio  (None, 112, 112, 32)     128       
+ n)                                                              
+                                                                 
+ conv1_relu (ReLU)           (None, 112, 112, 32)      0         
+                                                                 
+ conv_dw_1 (DepthwiseConv2D)  (None, 112, 112, 32)     288       
+                                                                 
+ conv_dw_1_bn (BatchNormaliz  (None, 112, 112, 32)     128       
+ ation)                                                          
+                                                                 
+ conv_dw_1_relu (ReLU)       (None, 112, 112, 32)      0         
+                                                                 
+ conv_pw_1 (Conv2D)          (None, 112, 112, 64)      2048      
+                                                                 
+ conv_pw_1_bn (BatchNormaliz  (None, 112, 112, 64)     256       
+ ation)                                                          
+                                                                 
+ conv_pw_1_relu (ReLU)       (None, 112, 112, 64)      0         
+                                                                 
+ conv_pad_2 (ZeroPadding2D)  (None, 113, 113, 64)      0         
+                                                                 
+ conv_dw_2 (DepthwiseConv2D)  (None, 56, 56, 64)       576       
+                                                                 
+ conv_dw_2_bn (BatchNormaliz  (None, 56, 56, 64)       256       
+ ation)                                                          
+                                                                 
+ conv_dw_2_relu (ReLU)       (None, 56, 56, 64)        0         
+                                                                 
+ conv_pw_2 (Conv2D)          (None, 56, 56, 128)       8192      
+                                                                 
+ conv_pw_2_bn (BatchNormaliz  (None, 56, 56, 128)      512       
+ ation)                                                          
+                                                                 
+ conv_pw_2_relu (ReLU)       (None, 56, 56, 128)       0         
+                                                                 
+ conv_dw_3 (DepthwiseConv2D)  (None, 56, 56, 128)      1152      
+                                                                 
+ conv_dw_3_bn (BatchNormaliz  (None, 56, 56, 128)      512       
+ ation)                                                          
+                                                                 
+ conv_dw_3_relu (ReLU)       (None, 56, 56, 128)       0         
+                                                                 
+ conv_pw_3 (Conv2D)          (None, 56, 56, 128)       16384     
+                                                                 
+ conv_pw_3_bn (BatchNormaliz  (None, 56, 56, 128)      512       
+ ation)                                                          
+                                                                 
+ conv_pw_3_relu (ReLU)       (None, 56, 56, 128)       0         
+                                                                 
+ conv_pad_4 (ZeroPadding2D)  (None, 57, 57, 128)       0         
+                                                                 
+ conv_dw_4 (DepthwiseConv2D)  (None, 28, 28, 128)      1152      
+                                                                 
+ conv_dw_4_bn (BatchNormaliz  (None, 28, 28, 128)      512       
+ ation)                                                          
+                                                                 
+ conv_dw_4_relu (ReLU)       (None, 28, 28, 128)       0         
+                                                                 
+ conv_pw_4 (Conv2D)          (None, 28, 28, 256)       32768     
+                                                                 
+ conv_pw_4_bn (BatchNormaliz  (None, 28, 28, 256)      1024      
+ ation)                                                          
+                                                                 
+ conv_pw_4_relu (ReLU)       (None, 28, 28, 256)       0         
+                                                                 
+ conv_dw_5 (DepthwiseConv2D)  (None, 28, 28, 256)      2304      
+                                                                 
+ conv_dw_5_bn (BatchNormaliz  (None, 28, 28, 256)      1024      
+ ation)                                                          
+                                                                 
+ conv_dw_5_relu (ReLU)       (None, 28, 28, 256)       0         
+                                                                 
+ conv_pw_5 (Conv2D)          (None, 28, 28, 256)       65536     
+                                                                 
+ conv_pw_5_bn (BatchNormaliz  (None, 28, 28, 256)      1024      
+ ation)                                                          
+                                                                 
+ conv_pw_5_relu (ReLU)       (None, 28, 28, 256)       0         
+                                                                 
+ conv_pad_6 (ZeroPadding2D)  (None, 29, 29, 256)       0         
+                                                                 
+ conv_dw_6 (DepthwiseConv2D)  (None, 14, 14, 256)      2304      
+                                                                 
+ conv_dw_6_bn (BatchNormaliz  (None, 14, 14, 256)      1024      
+ ation)                                                          
+                                                                 
+ conv_dw_6_relu (ReLU)       (None, 14, 14, 256)       0         
+                                                                 
+ conv_pw_6 (Conv2D)          (None, 14, 14, 512)       131072    
+                                                                 
+ conv_pw_6_bn (BatchNormaliz  (None, 14, 14, 512)      2048      
+ ation)                                                          
+                                                                 
+ conv_pw_6_relu (ReLU)       (None, 14, 14, 512)       0         
+                                                                 
+ conv_dw_7 (DepthwiseConv2D)  (None, 14, 14, 512)      4608      
+                                                                 
+ conv_dw_7_bn (BatchNormaliz  (None, 14, 14, 512)      2048      
+ ation)                                                          
+                                                                 
+ conv_dw_7_relu (ReLU)       (None, 14, 14, 512)       0         
+                                                                 
+ conv_pw_7 (Conv2D)          (None, 14, 14, 512)       262144    
+                                                                 
+ conv_pw_7_bn (BatchNormaliz  (None, 14, 14, 512)      2048      
+ ation)                                                          
+                                                                 
+ conv_pw_7_relu (ReLU)       (None, 14, 14, 512)       0         
+                                                                 
+ conv_dw_8 (DepthwiseConv2D)  (None, 14, 14, 512)      4608      
+                                                                 
+ conv_dw_8_bn (BatchNormaliz  (None, 14, 14, 512)      2048      
+ ation)                                                          
+                                                                 
+ conv_dw_8_relu (ReLU)       (None, 14, 14, 512)       0         
+                                                                 
+ conv_pw_8 (Conv2D)          (None, 14, 14, 512)       262144    
+                                                                 
+ conv_pw_8_bn (BatchNormaliz  (None, 14, 14, 512)      2048      
+ ation)                                                          
+                                                                 
+ conv_pw_8_relu (ReLU)       (None, 14, 14, 512)       0         
+                                                                 
+ conv_dw_9 (DepthwiseConv2D)  (None, 14, 14, 512)      4608      
+                                                                 
+ conv_dw_9_bn (BatchNormaliz  (None, 14, 14, 512)      2048      
+ ation)                                                          
+                                                                 
+ conv_dw_9_relu (ReLU)       (None, 14, 14, 512)       0         
+                                                                 
+ conv_pw_9 (Conv2D)          (None, 14, 14, 512)       262144    
+                                                                 
+ conv_pw_9_bn (BatchNormaliz  (None, 14, 14, 512)      2048      
+ ation)                                                          
+                                                                 
+ conv_pw_9_relu (ReLU)       (None, 14, 14, 512)       0         
+                                                                 
+ conv_dw_10 (DepthwiseConv2D  (None, 14, 14, 512)      4608      
+ )                                                               
+                                                                 
+ conv_dw_10_bn (BatchNormali  (None, 14, 14, 512)      2048      
+ zation)                                                         
+                                                                 
+ conv_dw_10_relu (ReLU)      (None, 14, 14, 512)       0         
+                                                                 
+ conv_pw_10 (Conv2D)         (None, 14, 14, 512)       262144    
+                                                                 
+ conv_pw_10_bn (BatchNormali  (None, 14, 14, 512)      2048      
+ zation)                                                         
+                                                                 
+ conv_pw_10_relu (ReLU)      (None, 14, 14, 512)       0         
+                                                                 
+ conv_dw_11 (DepthwiseConv2D  (None, 14, 14, 512)      4608      
+ )                                                               
+                                                                 
+ conv_dw_11_bn (BatchNormali  (None, 14, 14, 512)      2048      
+ zation)                                                         
+                                                                 
+ conv_dw_11_relu (ReLU)      (None, 14, 14, 512)       0         
+                                                                 
+ conv_pw_11 (Conv2D)         (None, 14, 14, 512)       262144    
+                                                                 
+ conv_pw_11_bn (BatchNormali  (None, 14, 14, 512)      2048      
+ zation)                                                         
+                                                                 
+ conv_pw_11_relu (ReLU)      (None, 14, 14, 512)       0         
+                                                                 
+ conv_pad_12 (ZeroPadding2D)  (None, 15, 15, 512)      0         
+                                                                 
+ conv_dw_12 (DepthwiseConv2D  (None, 7, 7, 512)        4608      
+ )                                                               
+                                                                 
+ conv_dw_12_bn (BatchNormali  (None, 7, 7, 512)        2048      
+ zation)                                                         
+                                                                 
+ conv_dw_12_relu (ReLU)      (None, 7, 7, 512)         0         
+                                                                 
+ conv_pw_12 (Conv2D)         (None, 7, 7, 1024)        524288    
+                                                                 
+ conv_pw_12_bn (BatchNormali  (None, 7, 7, 1024)       4096      
+ zation)                                                         
+                                                                 
+ conv_pw_12_relu (ReLU)      (None, 7, 7, 1024)        0         
+                                                                 
+ conv_dw_13 (DepthwiseConv2D  (None, 7, 7, 1024)       9216      
+ )                                                               
+                                                                 
+ conv_dw_13_bn (BatchNormali  (None, 7, 7, 1024)       4096      
+ zation)                                                         
+                                                                 
+ conv_dw_13_relu (ReLU)      (None, 7, 7, 1024)        0         
+                                                                 
+ conv_pw_13 (Conv2D)         (None, 7, 7, 1024)        1048576   
+                                                                 
+ conv_pw_13_bn (BatchNormali  (None, 7, 7, 1024)       4096      
+ zation)                                                         
+                                                                 
+ conv_pw_13_relu (ReLU)      (None, 7, 7, 1024)        0         
+                                                                 
+ global_average_pooling2d (G  (None, 1, 1, 1024)       0         
+ lobalAveragePooling2D)                                          
+                                                                 
+ dropout (Dropout)           (None, 1, 1, 1024)        0         
+                                                                 
+ conv_preds (Conv2D)         (None, 1, 1, 1000)        1025000   
+                                                                 
+ reshape_2 (Reshape)         (None, 1000)              0         
+                                                                 
+ predictions (Activation)    (None, 1000)              0         
+                                                                 
+=================================================================
+Total params: 4,253,864
+Trainable params: 4,231,976
+Non-trainable params: 21,888
+_________________________________________________________________
\ No newline at end of file
Index: test.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test.py b/test.py
new file mode 100644
--- /dev/null	(date 1655741124572)
+++ b/test.py	(date 1655741124572)
@@ -0,0 +1,75 @@
+"""
+original preprocessing method is same as Inception, which takes 4×3×6×2 = 144 crops per image
+we only take
+"""
+from pathlib import Path
+
+import torch
+from torch import nn
+from torch.utils.data import DataLoader
+import torchvision.models as models
+
+from model import *
+from dataset import *
+from script import validate
+from script.utils import find_next_id, be_deterministic
+
+be_deterministic()
+
+
+def test():
+    # hyper parameters
+    batch_size = 64
+
+    # experiment settings
+    data = "imagenet"  # ["dogs", "mnist", "cifar10", "imagenet"]
+    model_type = "mobile_net"  # ["mobile_net", "lenet"]
+    device = "cuda" if torch.cuda.is_available() else "cpu"
+    num_workers = 4
+    out_directory = r".\out"
+    pretrained_model_path = r"C:\_Project\Pycharm Projects\MobileNet\pretrained\wjc-mobilenet-a100-r224-c1000-e0000.pth"  # r"C:\_Project\Pycharm Projects\MobileNet\out\0001\network_0030.pth"
+
+    assert data in ["dogs", "mnist", "cifar10", "imagenet"]
+    assert model_type in ["mobile_net", "lenet"]
+
+    # training configs
+    c = dict()
+    c["num_prints"] = 20
+    c["device"] = device
+
+    out_path = Path(out_directory) / f"{find_next_id(Path(out_directory)):04d}"
+
+    # select dataset
+    test_dataset = None
+    if data == "dogs":
+        test_dataset = DogsDataset(root=r"D:\_Dataset\Stanford Dogs", is_train=False)
+    elif data == "mnist":
+        test_dataset = MNISTDataset(root=r"D:\_Dataset", is_train=False)
+    elif data == "cifar10":
+        test_dataset = CIFAR10Dataset(root=r"D:\_Dataset\CIFAR10", is_train=False)
+    elif data == "imagenet":
+        test_dataset = ImageNetDataset(root=r"D:\_Dataset\ImageNet_2012", is_train=False)
+    num_class = test_dataset.num_labels
+
+    # set up model, dataloader, optimizer, criterion
+    network = None
+    if model_type == "lenet":
+        network = LeNet(num_class).to(device)
+    elif model_type == "mobile_net":
+        network = MobileNet(num_class).to(device)
+    test_dataloader = DataLoader(test_dataset, batch_size=batch_size, num_workers=num_workers)
+    criterion = nn.CrossEntropyLoss()
+
+    state = torch.load(pretrained_model_path)
+    network.load_state_dict(state["state_dict"])
+
+    network = models.mobilenet_v2(pretrained=True)
+    network = network.to(device)
+
+    # testing loop
+    print(f"{'-' * 5} Test result {'-' * 5}")
+    validate(network, test_dataloader, criterion, **c)
+
+
+if __name__ == '__main__':
+    test()
Index: notes/tf_mobilenet_params.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/notes/tf_mobilenet_params.txt b/notes/tf_mobilenet_params.txt
new file mode 100644
--- /dev/null	(date 1655717327873)
+++ b/notes/tf_mobilenet_params.txt	(date 1655717327873)
@@ -0,0 +1,91 @@
+input_1                       :
+conv1                         : kernel:0(3, 3, 3, 32)
+conv1_bn                      : gamma:0(32,) beta:0(32,) moving_mean:0(32,) moving_variance:0(32,)
+conv1_relu                    :
+conv_dw_1                     : depthwise_kernel:0(3, 3, 32, 1)
+conv_dw_1_bn                  : gamma:0(32,) beta:0(32,) moving_mean:0(32,) moving_variance:0(32,)
+conv_dw_1_relu                :
+conv_pw_1                     : kernel:0(1, 1, 32, 64)
+conv_pw_1_bn                  : gamma:0(64,) beta:0(64,) moving_mean:0(64,) moving_variance:0(64,)
+conv_pw_1_relu                :
+conv_pad_2                    :
+conv_dw_2                     : depthwise_kernel:0(3, 3, 64, 1)
+conv_dw_2_bn                  : gamma:0(64,) beta:0(64,) moving_mean:0(64,) moving_variance:0(64,)
+conv_dw_2_relu                :
+conv_pw_2                     : kernel:0(1, 1, 64, 128)
+conv_pw_2_bn                  : gamma:0(128,) beta:0(128,) moving_mean:0(128,) moving_variance:0(128,)
+conv_pw_2_relu                :
+conv_dw_3                     : depthwise_kernel:0(3, 3, 128, 1)
+conv_dw_3_bn                  : gamma:0(128,) beta:0(128,) moving_mean:0(128,) moving_variance:0(128,)
+conv_dw_3_relu                :
+conv_pw_3                     : kernel:0(1, 1, 128, 128)
+conv_pw_3_bn                  : gamma:0(128,) beta:0(128,) moving_mean:0(128,) moving_variance:0(128,)
+conv_pw_3_relu                :
+conv_pad_4                    :
+conv_dw_4                     : depthwise_kernel:0(3, 3, 128, 1)
+conv_dw_4_bn                  : gamma:0(128,) beta:0(128,) moving_mean:0(128,) moving_variance:0(128,)
+conv_dw_4_relu                :
+conv_pw_4                     : kernel:0(1, 1, 128, 256)
+conv_pw_4_bn                  : gamma:0(256,) beta:0(256,) moving_mean:0(256,) moving_variance:0(256,)
+conv_pw_4_relu                :
+conv_dw_5                     : depthwise_kernel:0(3, 3, 256, 1)
+conv_dw_5_bn                  : gamma:0(256,) beta:0(256,) moving_mean:0(256,) moving_variance:0(256,)
+conv_dw_5_relu                :
+conv_pw_5                     : kernel:0(1, 1, 256, 256)
+conv_pw_5_bn                  : gamma:0(256,) beta:0(256,) moving_mean:0(256,) moving_variance:0(256,)
+conv_pw_5_relu                :
+conv_pad_6                    :
+conv_dw_6                     : depthwise_kernel:0(3, 3, 256, 1)
+conv_dw_6_bn                  : gamma:0(256,) beta:0(256,) moving_mean:0(256,) moving_variance:0(256,)
+conv_dw_6_relu                :
+conv_pw_6                     : kernel:0(1, 1, 256, 512)
+conv_pw_6_bn                  : gamma:0(512,) beta:0(512,) moving_mean:0(512,) moving_variance:0(512,)
+conv_pw_6_relu                :
+conv_dw_7                     : depthwise_kernel:0(3, 3, 512, 1)
+conv_dw_7_bn                  : gamma:0(512,) beta:0(512,) moving_mean:0(512,) moving_variance:0(512,)
+conv_dw_7_relu                :
+conv_pw_7                     : kernel:0(1, 1, 512, 512)
+conv_pw_7_bn                  : gamma:0(512,) beta:0(512,) moving_mean:0(512,) moving_variance:0(512,)
+conv_pw_7_relu                :
+conv_dw_8                     : depthwise_kernel:0(3, 3, 512, 1)
+conv_dw_8_bn                  : gamma:0(512,) beta:0(512,) moving_mean:0(512,) moving_variance:0(512,)
+conv_dw_8_relu                :
+conv_pw_8                     : kernel:0(1, 1, 512, 512)
+conv_pw_8_bn                  : gamma:0(512,) beta:0(512,) moving_mean:0(512,) moving_variance:0(512,)
+conv_pw_8_relu                :
+conv_dw_9                     : depthwise_kernel:0(3, 3, 512, 1)
+conv_dw_9_bn                  : gamma:0(512,) beta:0(512,) moving_mean:0(512,) moving_variance:0(512,)
+conv_dw_9_relu                :
+conv_pw_9                     : kernel:0(1, 1, 512, 512)
+conv_pw_9_bn                  : gamma:0(512,) beta:0(512,) moving_mean:0(512,) moving_variance:0(512,)
+conv_pw_9_relu                :
+conv_dw_10                    : depthwise_kernel:0(3, 3, 512, 1)
+conv_dw_10_bn                 : gamma:0(512,) beta:0(512,) moving_mean:0(512,) moving_variance:0(512,)
+conv_dw_10_relu               :
+conv_pw_10                    : kernel:0(1, 1, 512, 512)
+conv_pw_10_bn                 : gamma:0(512,) beta:0(512,) moving_mean:0(512,) moving_variance:0(512,)
+conv_pw_10_relu               :
+conv_dw_11                    : depthwise_kernel:0(3, 3, 512, 1)
+conv_dw_11_bn                 : gamma:0(512,) beta:0(512,) moving_mean:0(512,) moving_variance:0(512,)
+conv_dw_11_relu               :
+conv_pw_11                    : kernel:0(1, 1, 512, 512)
+conv_pw_11_bn                 : gamma:0(512,) beta:0(512,) moving_mean:0(512,) moving_variance:0(512,)
+conv_pw_11_relu               :
+conv_pad_12                   :
+conv_dw_12                    : depthwise_kernel:0(3, 3, 512, 1)
+conv_dw_12_bn                 : gamma:0(512,) beta:0(512,) moving_mean:0(512,) moving_variance:0(512,)
+conv_dw_12_relu               :
+conv_pw_12                    : kernel:0(1, 1, 512, 1024)
+conv_pw_12_bn                 : gamma:0(1024,) beta:0(1024,) moving_mean:0(1024,) moving_variance:0(1024,)
+conv_pw_12_relu               :
+conv_dw_13                    : depthwise_kernel:0(3, 3, 1024, 1)
+conv_dw_13_bn                 : gamma:0(1024,) beta:0(1024,) moving_mean:0(1024,) moving_variance:0(1024,)
+conv_dw_13_relu               :
+conv_pw_13                    : kernel:0(1, 1, 1024, 1024)
+conv_pw_13_bn                 : gamma:0(1024,) beta:0(1024,) moving_mean:0(1024,) moving_variance:0(1024,)
+conv_pw_13_relu               :
+global_average_pooling2d      :
+dropout                       :
+conv_preds                    : kernel:0(1, 1, 1024, 1000) bias:0(1000,)
+reshape_2                     :
+predictions                   :
\ No newline at end of file
